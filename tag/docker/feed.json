{
    "version": "https://jsonfeed.org/version/1",
    "title": "命运转轮 • All posts by \"docker\" tag",
    "description": "不曾亏欠, 不曾辜负, 如此足矣",
    "home_page_url": "https://arachnid.cc",
    "items": [
        {
            "id": "https://arachnid.cc/docker-deployment-of-paperless/",
            "url": "https://arachnid.cc/docker-deployment-of-paperless/",
            "title": "docker 部署之 paperless-ngx 文档归类",
            "date_published": "2025-06-18T14:11:18.000Z",
            "content_html": "<blockquote>\n<p>Version：<a href=\"https://github.com/paperless-ngx/paperless-ngx/tree/v2.16.3\"><strong>Paperless-ngx</strong></a> 2.16.3</p>\n</blockquote>\n<p><img data-src=\"image-20250621174546690.png\" alt=\"paperless-ngx login\" /></p>\n<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<p>Paperless-ngx 是一个基于 <strong>Django</strong> 框架的开源文档管理系统。与传统的扫描仪相比，它不仅可以将纸质文件数字化，还支持 <strong>OCR（光学字符识别）</strong>，将文档内容识别为可搜索的文本。</p>\n<p>其核心功能包括：</p>\n<ul>\n<li><strong>文档的组织与索引</strong>：通过标签、对应者、类型等多种方式组织扫描文档。</li>\n<li><strong>OCR 文本识别</strong>：对文档进行光学字符识别，使包含图像的扫描文档也能搜索和选择文本。</li>\n<li><strong>多语言支持</strong>：利用开源的 Tesseract 引擎，支持 100 多种语言。</li>\n<li><strong>长期存储格式</strong>：文档以 PDF/A 格式保存，设计用于长期存储。</li>\n<li><strong>智能标签与分类</strong>：使用机器学习自动添加标签、对应者和文档类型。</li>\n<li><strong>广泛的文件支持</strong>：支持 PDF 文档、图像、纯文本文件、Office 文档等。</li>\n<li><strong>定制化的文件管理</strong>：Paperless-ngx 管理文件名和文件夹，支持不同的配置。</li>\n<li><strong>现代化的网页应用</strong>：定制仪表板、过滤器、批量编辑、拖放上传、自定义视图、共享链接等。</li>\n<li><strong>全文搜索</strong>：自动完成、相关性排序、高亮显示匹配查询的部分。</li>\n<li><strong>电子邮件处理</strong>：从电子邮件账户导入文档，配置多个账户和规则。</li>\n<li><strong>多用户权限系统</strong>：内置健壮的多用户权限系统。</li>\n<li><strong>多核系统优化</strong>：并行处理多个文档。</li>\n</ul>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnBhcGVybGVzcy1uZ3guY29tLw==\">https://docs.paperless-ngx.com/</span></p>\n<p><img data-src=\"image-20250621174656418.png\" alt=\"paperless-ngx\" /></p>\n<h1 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h1>\n<p>创建 paperless-ngx 数据文件夹及文档归类存放位置：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># $PATH 为你的文档归类存放路径</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /app/paperless-ngx</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /<span class=\"token operator\">&lt;</span><span class=\"token environment constant\">$PATH</span><span class=\"token operator\">></span>/export /<span class=\"token operator\">&lt;</span><span class=\"token environment constant\">$PATH</span><span class=\"token operator\">></span>/consume /<span class=\"token operator\">&lt;</span><span class=\"token environment constant\">$PATH</span><span class=\"token operator\">></span>/data /<span class=\"token operator\">&lt;</span><span class=\"token environment constant\">$PATH</span><span class=\"token operator\">></span>/media</pre></td></tr></table></figure><p>进入到  <code>/app/paperless-ngx</code>  文件夹后，依次创建如下配置所需文件夹：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost:/app/paperless-ngx] #\"></td><td><pre><span class=\"token function\">mkdir</span> redisdata dbdata</pre></td></tr></table></figure><p>添加  <code>docker-compose.yml</code>  配置文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost:/app/paperless-ngx] #\"></td><td><pre><span class=\"token function\">touch</span> docker-compose.yml</pre></td></tr></table></figure><p>写入：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"><span>docker-compose.yml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># docker compose file for running paperless from the Docker Hub.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># This file contains everything paperless needs to run.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># Paperless supports amd64, arm and arm64 hardware.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># All compose files of paperless configure paperless in the following way:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># - Paperless is (re)started on system boot, if it was running before shutdown.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># - Docker volumes for storing data are managed by Docker.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># - Folders for importing and exporting files are created in the same directory</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#   as this file and mounted to the correct folders inside the container.</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># - Paperless listens on port 8000.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># In addition to that, this Docker Compose file adds the following optional</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># configurations:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># - Instead of SQLite (default), MariaDB is used as the database server.</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># - Apache Tika and Gotenberg servers are started with paperless and paperless</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#   is configured to use these services. These provide support for consuming</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">#   Office documents (Word, Excel, Power Point and their LibreOffice counter-</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">#   parts.</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># To install and update paperless with this file, do the following:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># - Copy this file as 'docker-compose.yml' and the files 'docker-compose.env'</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">#   and '.env' into a folder.</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># - Run 'docker compose pull'.</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># - Run 'docker compose up -d'.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\"># For more extensive installation and update instructions, refer to the</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># documentation.</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3.4\"</span>  <span class=\"token comment\"># 指定使用的 Docker Compose 文件版本</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token key atrule\">broker</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> library/redis<span class=\"token punctuation\">:</span><span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> paperless<span class=\"token punctuation\">-</span>broker</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> paperless<span class=\"token punctuation\">-</span>broker</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> unless<span class=\"token punctuation\">-</span>stopped</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token punctuation\">-</span> /home/.app/paperless<span class=\"token punctuation\">-</span>ngx/redisdata<span class=\"token punctuation\">:</span>/data</pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token key atrule\">db</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> library/mariadb<span class=\"token punctuation\">:</span>lts</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> paperless<span class=\"token punctuation\">-</span>mariadb</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> paperless<span class=\"token punctuation\">-</span>mariadb</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> unless<span class=\"token punctuation\">-</span>stopped</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token punctuation\">-</span> /home/.app/paperless<span class=\"token punctuation\">-</span>ngx/dbdata<span class=\"token punctuation\">:</span>/var/lib/mysql</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token key atrule\">MARIADB_HOST</span><span class=\"token punctuation\">:</span> paperless</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token key atrule\">MARIADB_DATABASE</span><span class=\"token punctuation\">:</span> paperless</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token key atrule\">MARIADB_USER</span><span class=\"token punctuation\">:</span> paperless</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      <span class=\"token key atrule\">MARIADB_PASSWORD</span><span class=\"token punctuation\">:</span> paperless</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      <span class=\"token key atrule\">MARIADB_ROOT_PASSWORD</span><span class=\"token punctuation\">:</span> paperless</pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token key atrule\">webserver</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> paperlessngx/paperless<span class=\"token punctuation\">-</span>ngx<span class=\"token punctuation\">:</span>latest</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> paperless<span class=\"token punctuation\">-</span>ngx</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> paperless<span class=\"token punctuation\">-</span>ngx</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> unless<span class=\"token punctuation\">-</span>stopped</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      <span class=\"token punctuation\">-</span> db</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      <span class=\"token punctuation\">-</span> broker</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>      <span class=\"token punctuation\">-</span> gotenberg</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>      <span class=\"token punctuation\">-</span> tika</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"28030:8000\"</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token key atrule\">healthcheck</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 定义健康检查</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>      <span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"CMD\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"curl\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-fs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-S\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"--max-time\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://localhost:8000\"</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 使用 curl 命令检查容器内的服务是否健康</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>      <span class=\"token key atrule\">interval</span><span class=\"token punctuation\">:</span> 30s  <span class=\"token comment\"># 每 30 秒检查一次</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>      <span class=\"token key atrule\">timeout</span><span class=\"token punctuation\">:</span> 10s  <span class=\"token comment\"># 超时时间为 10 秒</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>      <span class=\"token key atrule\">retries</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span>  <span class=\"token comment\"># 连续失败 5 次后认为服务不健康</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 如果不太懂下面路径映射具体作用，可看先下面详细的参数说明</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>      <span class=\"token punctuation\">-</span> /srv/dev<span class=\"token punctuation\">-</span>disk<span class=\"token punctuation\">-</span>by<span class=\"token punctuation\">-</span>uuid<span class=\"token punctuation\">-</span>c2850abb<span class=\"token punctuation\">-</span>0f0a<span class=\"token punctuation\">-</span>4770<span class=\"token punctuation\">-</span>8408<span class=\"token punctuation\">-</span>f4d5f0987175/paperless<span class=\"token punctuation\">-</span>ngx/data<span class=\"token punctuation\">:</span>/usr/src/paperless/data    <span class=\"token comment\"># 挂载数据 (检索的索引，源码数据库、分类模型等等) 目录，即 PAPERLESS_DATA_DIR 字段</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>      <span class=\"token punctuation\">-</span> /srv/dev<span class=\"token punctuation\">-</span>disk<span class=\"token punctuation\">-</span>by<span class=\"token punctuation\">-</span>uuid<span class=\"token punctuation\">-</span>c2850abb<span class=\"token punctuation\">-</span>0f0a<span class=\"token punctuation\">-</span>4770<span class=\"token punctuation\">-</span>8408<span class=\"token punctuation\">-</span>f4d5f0987175/paperless<span class=\"token punctuation\">-</span>ngx/media<span class=\"token punctuation\">:</span>/usr/src/paperless/media  <span class=\"token comment\"># 挂载存储文档及缩略图目录，即 PAPERLESS_MEDIA_ROOT 字段</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>      <span class=\"token punctuation\">-</span> /srv/dev<span class=\"token punctuation\">-</span>disk<span class=\"token punctuation\">-</span>by<span class=\"token punctuation\">-</span>uuid<span class=\"token punctuation\">-</span>c2850abb<span class=\"token punctuation\">-</span>0f0a<span class=\"token punctuation\">-</span>4770<span class=\"token punctuation\">-</span>8408<span class=\"token punctuation\">-</span>f4d5f0987175/paperless<span class=\"token punctuation\">-</span>ngx/export<span class=\"token punctuation\">:</span>/usr/src/paperless/export  <span class=\"token comment\"># 挂载导出目录</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>      <span class=\"token punctuation\">-</span> /srv/dev<span class=\"token punctuation\">-</span>disk<span class=\"token punctuation\">-</span>by<span class=\"token punctuation\">-</span>uuid<span class=\"token punctuation\">-</span>c2850abb<span class=\"token punctuation\">-</span>0f0a<span class=\"token punctuation\">-</span>4770<span class=\"token punctuation\">-</span>8408<span class=\"token punctuation\">-</span>f4d5f0987175/paperless<span class=\"token punctuation\">-</span>ngx/import<span class=\"token punctuation\">:</span>/usr/src/paperless/consume  <span class=\"token comment\"># 挂载加载导入目录，即 PAPERLESS_CONSUMPTION_DIR 字段</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token key atrule\">env_file</span><span class=\"token punctuation\">:</span> docker<span class=\"token punctuation\">-</span>compose.env</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>      <span class=\"token key atrule\">PAPERLESS_REDIS</span><span class=\"token punctuation\">:</span> redis<span class=\"token punctuation\">:</span>//broker<span class=\"token punctuation\">:</span><span class=\"token number\">6379</span>  <span class=\"token comment\"># 配置 Redis 连接信息</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>      <span class=\"token key atrule\">PAPERLESS_DBENGINE</span><span class=\"token punctuation\">:</span> mariadb  <span class=\"token comment\"># 选择 mariadb 数据库</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>      <span class=\"token key atrule\">PAPERLESS_DBHOST</span><span class=\"token punctuation\">:</span> db  <span class=\"token comment\"># 配置数据库主机地址</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>      <span class=\"token key atrule\">PAPERLESS_DBUSER</span><span class=\"token punctuation\">:</span> paperless <span class=\"token comment\"># only needed if non-default username</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>      <span class=\"token key atrule\">PAPERLESS_DBPASS</span><span class=\"token punctuation\">:</span> paperless <span class=\"token comment\"># only needed if non-default password</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>      <span class=\"token key atrule\">PAPERLESS_DBPORT</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3306</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>      <span class=\"token key atrule\">PAPERLESS_TIKA_ENABLED</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>      <span class=\"token key atrule\">PAPERLESS_TIKA_GOTENBERG_ENDPOINT</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//gotenberg<span class=\"token punctuation\">:</span><span class=\"token number\">3000</span>  <span class=\"token comment\"># 配置 Gotenberg 服务的地址</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>      <span class=\"token key atrule\">PAPERLESS_TIKA_ENDPOINT</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//tika<span class=\"token punctuation\">:</span><span class=\"token number\">9998</span>  <span class=\"token comment\"># 配置 Tika 服务的地址</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    <span class=\"token key atrule\">dns</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 定义 DNS 服务器</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>      <span class=\"token punctuation\">-</span> 8.8.8.8  <span class=\"token comment\"># 使用 Google 的 DNS 服务器</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>      <span class=\"token punctuation\">-</span> 114.114.114.114  <span class=\"token comment\"># 使用中国运营的 DNS 服务器</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>  <span class=\"token key atrule\">gotenberg</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> gotenberg/gotenberg<span class=\"token punctuation\">:</span>latest</pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> paperless<span class=\"token punctuation\">-</span>gotenberg</pre></td></tr><tr><td data-num=\"98\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> paperless<span class=\"token punctuation\">-</span>gotenberg</pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> unless<span class=\"token punctuation\">-</span>stopped</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token comment\"># The gotenberg chromium route is used to convert .eml files. We do not</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    <span class=\"token comment\"># want to allow external content like tracking pixels or even javascript.</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"gotenberg\"</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"--chromium-disable-javascript=true\"</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"--chromium-allow-list=file:///tmp/.*\"</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>  <span class=\"token key atrule\">tika</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> apache/tika<span class=\"token punctuation\">:</span>latest</pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> paperless<span class=\"token punctuation\">-</span>tika</pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> paperless<span class=\"token punctuation\">-</span>tika</pre></td></tr><tr><td data-num=\"111\"></td><td><pre>    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> unless<span class=\"token punctuation\">-</span>stopped</pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>  <span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>  <span class=\"token key atrule\">media</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>  <span class=\"token key atrule\">dbdata</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>  redisdata<span class=\"token punctuation\">:</span></pre></td></tr></table></figure><p>根据配置，同样单独添加环境变量文件  <code>docker-compose.env</code>  ：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost:/app/paperless-ngx] #\"></td><td><pre><span class=\"token function\">touch</span> docker-compose.env</pre></td></tr></table></figure><p>写入：</p>\n<pre><code class=\"language-test\">###############################################################################\n# Paperless-ngx settings                                                      #\n###############################################################################\n\n# See http://docs.paperless-ngx.com/configuration/ for all available options.\n\n# The UID and GID of the user used to run paperless in the container. Set this\n# to your UID and GID on the host so that you have write access to the\n# consumption directory.\nUSERMAP_UID=0\nUSERMAP_GID=0\n\n# See the documentation linked above for all options. A few commonly adjusted settings\n# are provided below.\n\n# This is required if you will be exposing Paperless-ngx on a public domain\n# (if doing so please consider security measures such as reverse proxy)\n#PAPERLESS_URL=https://paperless.example.com\n\n# Adjust this key if you plan to make paperless available publicly. It should\n# be a very long sequence of random characters. You don't need to remember it.\nPAPERLESS_SECRET_KEY=change-me\n\n# Use this variable to set a timezone for the Paperless Docker containers. Defaults to UTC.\nPAPERLESS_TIME_ZONE=Asia/Shanghai\n\n# The default language to use for OCR. Set this to the language most of your\n# documents are written in.\nPAPERLESS_OCR_LANGUAGE=eng\n\n# Additional languages to install for text recognition, separated by a whitespace.\n# Note that this is different from PAPERLESS_OCR_LANGUAGE (default=eng), which defines\n# the language used for OCR.\n# The container installs English, German, Italian, Spanish and French by default.\n# See https://packages.debian.org/search?keywords=tesseract-ocr-&amp;searchon=names&amp;suite=buster\n# for available languages.\nPAPERLESS_OCR_LANGUAGES=chi-sim chi-tra\n\n# Changes the filenames paperless uses to store documents in the media directory. See File name handling for details.\n# Default is none, which disables this feature.\nPAPERLESS_FILENAME_FORMAT=other/&#123;&#123; original_name &#125;&#125;\n</code></pre>\n<p>修改完成后，使用以下命令进行部署：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost:/app/paperless-ngx] #\"></td><td><pre><span class=\"token function\">docker-compose</span> up <span class=\"token parameter variable\">-d</span></pre></td></tr></table></figure><h2 id=\"主要参数说明\"><a class=\"anchor\" href=\"#主要参数说明\">#</a> 主要参数说明</h2>\n<p><strong>关于映射路径：</strong></p>\n<p>在  <code>docker-compose.yml</code>  文件的  <code>webserver</code>  服务配置中，存在四个路径的映射，</p>\n<ul>\n<li><code>/usr/src/paperless/data</code>  ：即  <code>PAPERLESS_DATA_DIR</code>  字段，用于存放数据 (检索的索引，源码数据库、分类模型等等)，如果使用默认的  <code>PAPERLESS_LOGGING_DIR</code>  字段，那么 log 文件也将  <code>PAPERLESS_DATA_DIR/log/</code>  路径下存储。具体说明可看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnBhcGVybGVzcy1uZ3guY29tL2NvbmZpZ3VyYXRpb24vI1BBUEVSTEVTU19EQVRBX0RJUg==\">https://docs.paperless-ngx.com/configuration/#PAPERLESS_DATA_DIR</span></li>\n<li><code>/usr/src/paperless/media</code>  ：即  <code>PAPERLESS_MEDIA_ROOT</code>  字段，用于存储上传后的文档及提取的缩略文件，后期在面板上的  <code>保存路径</code>  也是此路径为根目录。具体说明可看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnBhcGVybGVzcy1uZ3guY29tL2NvbmZpZ3VyYXRpb24vI1BBUEVSTEVTU19NRURJQV9ST09U\">https://docs.paperless-ngx.com/configuration/#PAPERLESS_MEDIA_ROOT</span></li>\n<li><code>/usr/src/paperless/export</code>  ：如其名，该目录一般用于导出现有的文档所指向的存储路径，可以使用  <code>document_exporter</code>  命令执行。具体说明可看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnBhcGVybGVzcy1uZ3guY29tL2FkbWluaXN0cmF0aW9uLyNleHBvcnRlcg==\">https://docs.paperless-ngx.com/administration/#exporter</span></li>\n<li><code>/usr/src/paperless/consume</code>  ：即  <code>PAPERLESS_CONSUMPTION_DIR</code>  字段，用于批量加载导入现有的文档，如果你有大量的需要上传分析的文档，只需把这些文档统统放到目录下即可自动帮你处理归档，值得注意的是该目录下不能解析子目录，只处理当前的一级目录，并不会递归处理底下的子目录。具体说明可看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnBhcGVybGVzcy1uZ3guY29tL2NvbmZpZ3VyYXRpb24vI1BBUEVSTEVTU19DT05TVU1QVElPTl9ESVI=\">https://docs.paperless-ngx.com/configuration/#PAPERLESS_CONSUMPTION_DIR</span></li>\n</ul>\n<p><strong>关于环境变量：</strong></p>\n<ul>\n<li><code>PAPERLESS_OCR_LANGUAGE</code>  ：该字段是用于设置文档在解析的时候所调用的 OCR 语言，默认是使用  <code>eng</code>  ，一般来说这是一个使用 3 个字符的代码，所支持的语言可看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly90ZXNzZXJhY3Qtb2NyLmdpdGh1Yi5pby90ZXNzZG9jL0RhdGEtRmlsZXMtaW4tZGlmZmVyZW50LXZlcnNpb25zLmh0bWw=\">languages Tesseract supports</span> ；当然它也可以是多语言，可以使用  <code>+</code>  符号来组合，eg：  <code>deu+eng</code>  ；值得注意的是，如果使用多语言组合，需要在 <a href=\"https://docs.paperless-ngx.com/configuration/#PAPERLESS_OCR_LANGUAGES\"> <code>PAPERLESS_OCR_LANGUAGES</code> </a> 字段中添加对应的语言，或者在部署后手动安装对应的语言，如何手动安装可看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9vY3JteXBkZi5yZWFkdGhlZG9jcy5pby9lbi9sYXRlc3QvbGFuZ3VhZ2VzLmh0bWw=\">Installing additional language packs</span>  。另外，若如果你的语言包含一个  <code>-</code>  字符，如  <code>chi-sim</code>  中文简体，你必须使用  <code>chi_sim</code>  。具体说明可看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnBhcGVybGVzcy1uZ3guY29tL2NvbmZpZ3VyYXRpb24vI1BBUEVSTEVTU19PQ1JfTEFOR1VBR0U=\">https://docs.paperless-ngx.com/configuration/#PAPERLESS_OCR_LANGUAGE</span></li>\n<li><code>PAPERLESS_OCR_LANGUAGES</code>  ：用于安装其它的 OCR 语言。 默认情况下，无需安装的语言有英语、德语、意大利语、西班牙语和法语。 如果你需要的语言不在列表中，请使用此配置选项安装所需的语言。 你需要找到正确的 LangCodes，但需要注意的是，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYWNrYWdlcy5kZWJpYW4ub3JnL2J1bGxzZXllL2dyYXBoaWNzLw==\">tesseract-ocr-* package</span> 中的名字并不总是与语言代码相对应，例如， <code>chi_tra</code>  应指定为  <code>chi-tra</code>  。而对于使用安装多个语言时，必须利用 space 分离 。具体说明可看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnBhcGVybGVzcy1uZ3guY29tL2NvbmZpZ3VyYXRpb24vI1BBUEVSTEVTU19PQ1JfTEFOR1VBR0VT\">https://docs.paperless-ngx.com/configuration/#PAPERLESS_OCR_LANGUAGES</span></li>\n<li><code>PAPERLESS_FILENAME_FORMAT</code>  ：该项用于调整你的文档存储结构及文件命名；如果你想以不同的方式命名并分类存储所上传的文档，那么你可以通过参数调整该属性，当然，你也可以后续通过面板设置的  <code>保存路径</code>  中重新调整路径结构及命名方式。在这里的  <code>other/&#123;&#123; original_name &#125;&#125;</code>  参数，拆解出来就是以  <code>原始命名的方式</code>  存储在  <code>$PAPERLESS_MEDIA_ROOT/other/</code>  路径下，eg： <code>PAPERLESS_MEDIA_ROOT</code>  的映射路径为  <code>/mnt/sda1/documents/</code>  上传一份名为  <code>paperless.pdf</code>  的文件，那么它将存储为  <code>/mnt/sda1/documents/other/paperless.pdf</code>  ；而对于官方默认的情况下，您最终会在媒体目录中得到  <code>/mnt/sda1/documents/0000123.pdf</code>  之类的文件。嘛，具体详细的说明可以观看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnBhcGVybGVzcy1uZ3guY29tL2FkdmFuY2VkX3VzYWdlLyNmaWxlLW5hbWUtaGFuZGxpbmc=\">File name handling</span> ，或者自己尝试验证，这里就不作过多的介绍了。</li>\n</ul>\n<p>note：</p>\n<p>关于其它功能配置可以参看官方  <code>docker-compose</code>  文件：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3BhcGVybGVzcy1uZ3gvcGFwZXJsZXNzLW5neC90cmVlL2Rldi9kb2NrZXIvY29tcG9zZQ==\">https://github.com/paperless-ngx/paperless-ngx/tree/dev/docker/compose</span></p>\n<p>关于配置属性字段可以参看官方说明：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnBhcGVybGVzcy1uZ3guY29tL2NvbmZpZ3VyYXRpb24v\">https://docs.paperless-ngx.com/configuration/</span></p>\n<h1 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h1>\n<p>进入 paperless-ngx 容器中的 shell 终端：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> paperless-ngx /bin/sh</pre></td></tr></table></figure><p>输入下面的命令创建超级用户：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"# \"></td><td><pre>python3 manage.py createsuperuser</pre></td></tr></table></figure><p>依次输入：<br />\n <code>username</code> <br />\n <code>email</code> <br />\n <code>password</code></p>\n<p>通过浏览器访问  <code>http://localhost:2430</code>  ，输入刚才设置的账号密码：</p>\n<p><img data-src=\"image-20250618232553494.png\" alt=\"image-20250618232553494\" /></p>\n<h2 id=\"ocr-配置\"><a class=\"anchor\" href=\"#ocr-配置\">#</a> OCR 配置</h2>\n<p>在  <code>配置</code>  -&gt;  <code>OCR 设置</code>  中调整为以下参数：</p>\n<p><img data-src=\"image-20250620210917503.png\" alt=\"image-20250620210917503\" /></p>\n<h2 id=\"路径管理\"><a class=\"anchor\" href=\"#路径管理\">#</a> 路径管理</h2>\n<p>在面板上的  <code>保存路径</code>  中，你可以创建不同的存储路径，该路径皆在  <code>PAPERLESS_MEDIA_ROOT</code>  字段的路径下：</p>\n<p><img data-src=\"image-20250621101331594.png\" alt=\"image-20250621101331594\" /></p>\n<p>同样的，这些路径参数也支持 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnBhcGVybGVzcy1uZ3guY29tL2FkdmFuY2VkX3VzYWdlLyNmaWxlbmFtZS1mb3JtYXQtdmFyaWFibGVz\">Placeholders</span> 的属性参数：</p>\n<p><img data-src=\"image-20250621160921382.png\" alt=\"image-20250621160921382\" /></p>\n<h2 id=\"匹配算法\"><a class=\"anchor\" href=\"#匹配算法\">#</a> 匹配算法</h2>\n<p>在  <code>联系人</code>  、 <code>标签</code>  、 <code>保存路径</code>  等管理中，存在匹配算法这一选项，这是用来自动归类，添加到所属联系人、赋予对应的标签或存到指定路径下：</p>\n<p><img data-src=\"image-20250621162127589.png\" alt=\"image-20250621162127589\" /></p>\n<h1 id=\"安可\"><a class=\"anchor\" href=\"#安可\">#</a> 安可</h1>\n<p>关于 App 客户端，可以使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FzdHViZW5ib3JkL3BhcGVybGVzcy1tb2JpbGU=\">Paperless Mobile</span> 软件：</p>\n<p><img data-src=\"image-20250814203639468.png\" alt=\"image-20250814203639468\" /></p>\n<p><img data-src=\"image-20250814203646699.png\" alt=\"image-20250814203646699\" /></p>\n<p>主要功能都有，唯一遗憾就是目前还不支持中文，不过英文基本也能看懂，问题不大。</p>\n<p>功能特点：</p>\n<p>✔️一目了然地查看文档</p>\n<p>✔️添加，删除或编辑文档</p>\n<p>✔️共享、下载和预览文件</p>\n<p>✔️管理和分配标签</p>\n<p>✔️扫描并上传文件到无纸化</p>\n<p>✔️通过无纸化移动上传其他应用程序中的现有文档</p>\n<p>✔️在专用收件箱中轻松处理和管理新文档</p>\n<p>✔️使用广泛的过滤条件搜索文档</p>\n<p>✔️使用生物特征因子保护您的数据</p>\n<p>✔️支持 TLS 互认证（客户端证书）</p>\n<p>✔️现代，直观的 UI 根据材料设计 3 规范构建</p>\n<p>✔️提供英语，德语，波兰语，法语，加泰罗尼亚语，捷克语和土耳其语，并将提供更多</p>\n",
            "tags": [
                "docker"
            ]
        },
        {
            "id": "https://arachnid.cc/docker-deployment-of-v2raya/",
            "url": "https://arachnid.cc/docker-deployment-of-v2raya/",
            "title": "docker 部署之 v2raya 科学上网",
            "date_published": "2025-04-02T11:34:32.000Z",
            "content_html": "<blockquote>\n<p>Version：<a href=\"https://github.com/v2rayA/v2rayA/releases/tag/v2.2.6.7\"><strong>v2rayA</strong></a> 2.2.6.7</p>\n</blockquote>\n<p><img data-src=\"image-20250621175032528.png\" alt=\"v2raya login\" /></p>\n<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<p>v2raya 是一个使用 Web UI 来配置 v2ray 的服务，方便好用，特别适合没有图形界面的 linux server 系统。</p>\n<p>主要功能：</p>\n<ul>\n<li>自动定时从机场订阅地址中获取更新配置</li>\n<li>提供透明代理，系统代理，代理端口</li>\n<li>提供路由服务，自动更新 GFWList</li>\n<li>可视化的配置页面</li>\n<li>几乎所有机场都能支持，完美替代 clash 功能</li>\n<li>支持多节点负载均衡</li>\n</ul>\n<p>项目地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3YycmF5QS92MnJheUE=\">https://github.com/v2rayA/v2rayA</span></p>\n<p><img data-src=\"image-20250621175400593.png\" alt=\"v2raya\" /></p>\n<h1 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h1>\n<p>为你的 v2raya 存放创建数据和配置文件夹：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /app/v2raya</pre></td></tr></table></figure><p>运行 Docker：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">docker</span> pull mzz2017/v2raya:latest</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">--name</span> v2raya <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">--privileged</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">--net</span><span class=\"token operator\">=</span>host <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">V2RAYA_LOG_FILE</span><span class=\"token operator\">=</span>/tmp/v2raya.log <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">V2RAYA_V2RAY_BIN</span><span class=\"token operator\">=</span>/usr/local/bin/v2ray <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">V2RAYA_NFTABLES_SUPPORT</span><span class=\"token operator\">=</span>off <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">IPTABLES_MODE</span><span class=\"token operator\">=</span>legacy <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"11\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">V2RAYA_ADDRESS</span><span class=\"token operator\">=</span><span class=\"token number\">0.0</span>.0.0:2017 <span class=\"token punctuation\">\\</span> <span class=\"token comment\"># 监听端口为 2017</span></pre></td></tr><tr><td data-num=\"12\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">TZ</span><span class=\"token operator\">=</span>Asia/Shanghai <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"13\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-v</span> /lib/modules:/lib/modules:ro <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"14\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-v</span> /etc/resolv.conf:/etc/resolv.conf <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"15\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-v</span> /app/v2raya:/etc/v2raya <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"16\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">--restart</span> always <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"17\"></td><td data-command=\"\"></td><td><pre>  mzz2017/v2raya</pre></td></tr></table></figure><p>成功运行后，默认的端口为：2017。</p>\n<h1 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h1>\n<p>通过访问  <code>http://localhost:2017</code>  ，初始登录建立管理账号：</p>\n<p><img data-src=\"image-20250615093908346.png\" alt=\"image-20250615093908346\" /></p>\n<p>进入后，现在配置里配置好再添加你的订阅地址，一般按如下配置即可：</p>\n<p><img data-src=\"image-20250615094349529.png\" alt=\"image-20250615094349529\" /></p>\n<h2 id=\"gfwlist-模式\"><a class=\"anchor\" href=\"#gfwlist-模式\">#</a> GFWList 模式</h2>\n<p>如果要使用  <code>GFWList 模式</code>  ，记得更新到最新的资源。</p>\n<p><img data-src=\"image-20250816231852555.png\" alt=\"image-20250816231852555\" /></p>\n<h2 id=\"大陆白名单模式\"><a class=\"anchor\" href=\"#大陆白名单模式\">#</a> 大陆白名单模式</h2>\n<p>如果是用大陆白名单模式，可以通过更新  <code>geosite.dat</code>  和  <code>geoip.dat</code>  文件来适应新的规则，这俩文件的存放路径（定义为  <code>/run/user/&#123;uid&#125;/v2raya</code> ，一般 root 用户的 uid 为 0）可进终端后台查看：</p>\n<p><img data-src=\"image-20250615102136530.png\" alt=\"image-20250615102136530\" /></p>\n<p>由于在 v2raya 中没有找到自动更新这俩文件的入口（估计是跟随版本的），所以可以单独写个脚本自动更新（注意：是在 docker 容器里），更新来源可以参看项目：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0xveWFsc29sZGllci92MnJheS1ydWxlcy1kYXQ=\">https://github.com/Loyalsoldier/v2ray-rules-dat</span></p>\n",
            "tags": [
                "docker"
            ]
        },
        {
            "id": "https://arachnid.cc/docker-deployment-of-jellyfin/",
            "url": "https://arachnid.cc/docker-deployment-of-jellyfin/",
            "title": "docker 部署之 jellyfin 家庭影院",
            "date_published": "2025-03-19T11:11:35.000Z",
            "content_html": "<blockquote>\n<p>Version：<a href=\"https://github.com/paperless-ngx/paperless-ngx/tree/v2.16.3\"><strong>Paperless-ngx</strong></a> 10.10.6</p>\n</blockquote>\n<p><img data-src=\"image-20250814212532995.png\" alt=\"image-20250814212532995\" /></p>\n<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<p>目前市面上比较主流的家庭媒体服务器的选择主要有三个：Plex、Emby 和 Jellyfin；其中前两款对于基本使用免费，但对于像通过显卡硬件解码等功能是需付费订阅才能使用；而 Jellyfin 是 Emby 某个版本开源后独立出来的一个影音服务软件，是完全开源和免费的。Jellyfin 在一些大佬改装配置好驱动后能适应不同的显卡硬转，以此达到在外网播放的情况下使用硬件转码流畅播放。</p>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qZWxseWZpbi5vcmcv\">https://jellyfin.org/</span></p>\n<p><img data-src=\"image-20250814210117624.png\" alt=\"image-20250814210117624\" /></p>\n<h1 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h1>\n<p>为你的 jellyfin 存放创建缓存和配置文件夹：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># $PATH 为你的影视存放路径</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /app/jellyfin</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /app/jellyfin</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> cache config</pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /<span class=\"token operator\">&lt;</span><span class=\"token environment constant\">$PATH</span><span class=\"token operator\">></span>/media</pre></td></tr></table></figure><h2 id=\"硬解支持\"><a class=\"anchor\" href=\"#硬解支持\">#</a> 硬解支持</h2>\n<p>要让 jellyfin 的 docker 容器调用核显驱动（即人们常说的开启硬解），要满足两个条件：</p>\n<ol>\n<li>拥有支持视频解码的核心显卡，且核心显卡的<strong>驱动程序</strong>运行正常；</li>\n<li>将核显驱动<strong>直通</strong>给 docker 容器，并赋予 docker 容器调用该驱动的权限。</li>\n</ol>\n<p>对于系统是否满足上述第一个条件，可以输入以下命令进行检验：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[user@localhost] #\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-l</span> /dev/dri</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre>total <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre>drwxr-xr-x <span class=\"token number\">2</span> root root         <span class=\"token number\">80</span> Jun <span class=\"token number\">20</span> 02:04 by-path</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre>crw-rw---- <span class=\"token number\">1</span> root video  <span class=\"token number\">226</span>,   <span class=\"token number\">0</span> Jun <span class=\"token number\">20</span> 02:04 card0</pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre>crw-rw---- <span class=\"token number\">1</span> root render <span class=\"token number\">226</span>, <span class=\"token number\">128</span> Jun <span class=\"token number\">20</span> 02:04 renderD128</pre></td></tr></table></figure><p>终端返回的结果有  <code>renderD128</code>  ，那么它即对应你的核显，硬件系统满足视频解码的基本条件。</p>\n<p>接下来为这个核显驱动授予 docker 容器的驱动权限；从上面可以看到  <code>crw-rw---- 1 root render  226</code>  中， <code>root</code>  为管理用户，  <code>render</code>  为所在组，如果你不想麻烦可以在部署的时候直接赋予 root 权限，若是想分组或分用户管理，那就需要分别获取对应的用户 UID 或所属组 GID，通过如下命令获取（不同发行版请根据对应命令获取）：</p>\n<p>获取 UID：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># &lt;GROUP> 为查询的用户</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[user@localhost] #\"></td><td><pre><span class=\"token function\">id</span> <span class=\"token parameter variable\">-u</span> <span class=\"token operator\">&lt;</span>USER_NAME<span class=\"token operator\">></span></pre></td></tr></table></figure><p>获取 GID：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># &lt;GROUP> 为查询的组名</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[user@localhost] #\"></td><td><pre>getent group <span class=\"token operator\">&lt;</span>GROUP_NAME<span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token function\">cut</span> -d: <span class=\"token parameter variable\">-f3</span></pre></td></tr></table></figure><p>运行 Docker：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">docker</span> pull nyanmisaka/jellyfin:latest</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>jellyfin <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">PUID</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">PGID</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">TZ</span><span class=\"token operator\">=</span>Asia/Shanghai <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8096</span>:8096 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-v</span> /app/jellyfin/config:/config <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-v</span> /app/jellyfin/cache:/cache <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"11\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">--mount</span> <span class=\"token assign-left variable\">type</span><span class=\"token operator\">=</span>bind,source<span class=\"token operator\">=</span>/srv/dev-disk-by-uuid-fb7da335-33b8-4fac-8bbe-24c4cd13ccf7/media,destination<span class=\"token operator\">=</span>/media,ro<span class=\"token operator\">=</span>true <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"12\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">--device</span><span class=\"token operator\">=</span>/dev/dri/renderD128 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"13\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">--restart</span> always <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"14\"></td><td data-command=\"\"></td><td><pre>  nyanmisaka/jellyfin</pre></td></tr></table></figure><p>note：如果有需要用到不同的管理用户或管理组，那么在使用硬解的前提，需要获取对应 UID 和 GID 填写到部署上，否则后面使用硬解将会有问题，具体获取看上面。</p>\n<h1 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h1>\n<p>通过浏览器访问：  <code>http://localhost:8096</code>  ，按照指示一步步初始化配置：</p>\n<p><img data-src=\"image-20250816144652927.png\" alt=\"image-20250816144652927\" /></p>\n<p>配置你的管理员账号：</p>\n<p><img data-src=\"image-20250816144721170.png\" alt=\"image-20250816144721170\" /></p>\n<p>设置媒体读取路径，这里可以先跳过，后面进入控制台设置：</p>\n<p><img data-src=\"image-20250816144851150.png\" alt=\"image-20250816144851150\" /></p>\n<p>如需云端访问，可开启以下设置：</p>\n<p><img data-src=\"image-20250816145031703.png\" alt=\"image-20250816145031703\" /></p>\n<p>最后完成初始配置后，即可重新登录进入主界面：</p>\n<p><img data-src=\"image-20250816145114308.png\" alt=\"image-20250816145114308\" /></p>\n<p><img data-src=\"image-20250816145443332.png\" alt=\"image-20250816145443332\" /></p>\n<h2 id=\"硬解配置\"><a class=\"anchor\" href=\"#硬解配置\">#</a> 硬解配置</h2>\n<p>点击左上角：</p>\n<p><img data-src=\"image-20250816094625543.png\" alt=\"image-20250816094625543\" /></p>\n<p>进入 &quot;控制台&quot; ：</p>\n<p><img data-src=\"image-20250816094722765.png\" alt=\"image-20250816094722765\" /></p>\n<p>在 jellyfin 容器中的 shell 终端执行：</p>\n<pre><code>ls /dev/dri\n</code></pre>\n<p>确认显卡直通，正常将会显示：</p>\n<p><img data-src=\"image-20250816105816703.png\" alt=\"image-20250816105816703\" /></p>\n<p>记录并配置解码器：</p>\n<p><img data-src=\"image-20250816095148702.png\" alt=\"image-20250816095148702\" /></p>\n<p>note：</p>\n<ol>\n<li>硬件加速这里：下拉选择 &quot;Video Acceleartion API (VAAP)&quot; 或者 &quot;Intel QuickSync (QSV)&quot; ，不是太老的核 / 独显卡，建议选 QSV；</li>\n<li>如果播放失败，则可以尝试关闭 &quot;启用低电压模式的 Intel H.264 硬件编码器&quot; 和 &quot;启用低电压模式的 Intel HEVC 硬件编码器&quot; ;</li>\n<li>如需播放杜比视界，必须关闭 &quot;启用 VPP 色调映射&quot; ;</li>\n<li>如需支持杜比视界格式的 HDR 视频，则必须打开 &quot;首选系统原生的 DXVA 或 VA-API 硬件解码器&quot; ;</li>\n<li>最后根据实际情况选中 &quot;允许实时提取字幕&quot; 和 &quot;限制转码速度&quot; ；</li>\n</ol>\n<p>测试转码：</p>\n<p><img data-src=\"image-20250816105231987.png\" alt=\"image-20250816105231987\" /></p>\n<p><img data-src=\"image-20250816103820476.png\" alt=\"image-20250816103820476\" /></p>\n<p>硬解码资源占用：</p>\n<p><img data-src=\"image-20250816104002038.png\" alt=\"image-20250816104002038\" /></p>\n<p>如果不使用硬解码，那么你将会看到 CPU 占用 95% 以上的使用率，并且对于低性能 CPU 来说，将会播放卡顿：</p>\n<p><img data-src=\"image-20250816104339045.png\" alt=\"image-20250816104339045\" /></p>\n<h2 id=\"添加插件\"><a class=\"anchor\" href=\"#添加插件\">#</a> 添加插件</h2>\n<p><code>控制台</code>  -&gt;  <code>目录</code>  -&gt;  <code>存储库</code>  -&gt; 点击加号进行添加</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre># Jellyfin Stable</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>http://fra1.mirror.jellyfin.org/releases/plugin/manifest-stable.json</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre># jellyfin-plugin-metashark</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>https://github.com/cxfksword/jellyfin-plugin-metashark/releases/download/manifest/manifest.json</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre># jellyfin-plugin-metatube</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>https://raw.githubusercontent.com/metatube-community/jellyfin-plugin-metatube/dist/manifest.json</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre># jellyfin-plugin-bangumi</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>https://kookxiang.github.io/jellyfin-plugin-bangumi/repository.json</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre># jellyfin-plugin-manifest</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>https://raw.githubusercontent.com/danieladov/JellyfinPluginManifest/master/manifest.json</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre># jellyfin-plugins-manifest</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>https://www.iamparadox.dev/jellyfin/plugins/manifest.json</pre></td></tr></table></figure><p>如果加载完以上插件后，可以按需安装相应插件，一般用以下插件足矣：</p>\n<p><img data-src=\"image-20250816110312936.png\" alt=\"image-20250816110312936\" /></p>\n<ol>\n<li>File Transformation 和 Media Bar 是用于配置主题的，也即前面看到的电影背景封面及简介显示的轮播滚动。</li>\n<li>SkinManager 同样也是配置主题，目前里面支持九个主题配置。</li>\n<li>Bangumi 主要用于动漫刮削及动漫信息同步。</li>\n<li>MetaShark 和 MetaTube 则是用于电影和 xxx 的信息刮削。</li>\n<li>其余的部分也是用于刮削及资源整理的，具体可测试使用。</li>\n</ol>\n<h1 id=\"安可\"><a class=\"anchor\" href=\"#安可\">#</a> 安可</h1>\n<p>如果不想用网页端观看，而使用客户端，那么关于客户端应用可以在以下链接获取所需应用：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qZWxseWZpbi5vcmcvZG93bmxvYWRz\">https://jellyfin.org/downloads</span></p>\n<p>在这里，你也可以使用第三方的客户端 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2phcm5lZGVtZXVsZW1lZXN0ZXIvZmluZHJvaWQ=\">Findroid</span> ：</p>\n<p><img data-src=\"image-20250816114435404.png\" alt=\"image-20250816114435404\" /></p>\n<p><img data-src=\"image-20250816114441878.png\" alt=\"image-20250816114441878\" /></p>\n<p>目前使用下来，有个致命缺陷，混合类型和音乐类型的合集是无法显示的，只能电影或电视剧。</p>\n",
            "tags": [
                "docker",
                "nas"
            ]
        },
        {
            "id": "https://arachnid.cc/docker-deployment-of-navidrome/",
            "url": "https://arachnid.cc/docker-deployment-of-navidrome/",
            "title": "docker 部署之 navidrome 音乐播放",
            "date_published": "2025-03-19T11:11:35.000Z",
            "content_html": "<blockquote>\n<p>Version：<a href=\"https://github.com/navidrome/navidrome/tree/v0.55.2\"><strong>Navidrome</strong></a> 0.55.2</p>\n</blockquote>\n<p><img data-src=\"image-20250816115804062.png\" alt=\"image-20250816115804062\" /></p>\n<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<p>Navidrome 是一款开源的、轻量级的、自托管的音乐服务器，兼容 Subsonic API，可以通过网页或客户端应用访问和播放音乐。</p>\n<p>特点：</p>\n<ul>\n<li>处理超大音乐收藏</li>\n<li>几乎可串流任何音频格式</li>\n<li>读取并使用所有精心策划的元数据</li>\n<li>对合集（Various Artists 专辑）和盒装（多碟专辑）的强大支持</li>\n<li>多用户，每个用户都有自己的播放次数、播放列表、收藏夹等。</li>\n<li>资源使用率极低</li>\n<li>多平台，可在 macOS、Linux 和 Windows 上运行。还提供 Docker 映像</li>\n<li>所有主要平台（包括 Raspberry Pi）的二进制文件均可随时使用</li>\n<li>自动监控资料库变化，导入新文件并重新加载新元数据</li>\n<li>基于 Material UI 的可主题化、现代化和响应式网络界面</li>\n<li>与所有 Subsonic / Madsonic / Airsonic 客户端兼容</li>\n<li>即时转码可按用户 / 播放器设置。支持 Opus 编码</li>\n<li>翻译成各种语言</li>\n</ul>\n<p><img data-src=\"image-20250816143236595.png\" alt=\"image-20250816143236595\" /></p>\n<h1 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h1>\n<p>创建 navidrome 数据文件夹及音乐存放位置：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># $PATH 为你的相册存放路径</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /app/navidrome/data</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /<span class=\"token operator\">&lt;</span><span class=\"token environment constant\">$PATH</span><span class=\"token operator\">></span>/music</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /app/navidrome</pre></td></tr></table></figure><p>添加  <code>docker-compose.yml</code>  配置文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost:/app/navidrome] #\"></td><td><pre><span class=\"token function\">touch</span> docker-compose.yml</pre></td></tr></table></figure><p>写入：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"><span>docker-compose.yml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">navidrome</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> deluan/navidrome<span class=\"token punctuation\">:</span>latest</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> navidrome</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> navidrome</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">user</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">:</span><span class=\"token number\">0</span> <span class=\"token comment\"># should be owner of volumes</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"4533:4533\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">-</span> network</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token comment\"># Optional: put your config options customization here. Examples:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token key atrule\">ND_SCANNER_ENABLED</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"false\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token key atrule\">ND_SCANNER_SCHEDULE</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"@weekly\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token key atrule\">ND_LOGLEVEL</span><span class=\"token punctuation\">:</span> info</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token key atrule\">ND_SESSIONTIMEOUT</span><span class=\"token punctuation\">:</span> 12h</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token key atrule\">ND_BASEURL</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token key atrule\">ND_DEFAULTLANGUAGE</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"zh-Hans\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token key atrule\">ND_LASTFM_ENABLED</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"false\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token key atrule\">ND_LISTENBRAINZ_ENABLED</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"false\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token key atrule\">ND_ENABLEDOWNLOADS</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"false\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token key atrule\">ND_ENABLEFAVOURITES</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"true\"</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token key atrule\">ND_ENABLESHARING</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"false\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token key atrule\">ND_ENABLESTARRATING</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"false\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token key atrule\">ND_ENABLETRANSCODINGCONFIG</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"true\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token key atrule\">ND_TRANSCODINGCACHESIZE</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"400MB\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token key atrule\">ND_IMAGECACHESIZE</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"100MB\"</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token key atrule\">ND_SCANNER_ARTISTJOINER</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"&amp;\"</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"/app/navidrome/data:/data\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"/&lt;$PATH>/music:/music:ro\"</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token key atrule\">network</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token key atrule\">driver</span><span class=\"token punctuation\">:</span> bridge</pre></td></tr></table></figure><p>修改完成后，使用以下命令进行部署：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">docker-compose</span> up <span class=\"token parameter variable\">-d</span></pre></td></tr></table></figure><h2 id=\"主要参数说明\"><a class=\"anchor\" href=\"#主要参数说明\">#</a> 主要参数说明</h2>\n<p><strong>关于环境变量：</strong></p>\n<ul>\n<li><code>ND_SCANNER_ENABLED</code>  ：该字段用于是否启用计划扫描功能，默认是不开启，如果设为  <code>true</code>  ，那么将根据  <code>ND_SCANNER_SCHEDULE</code>  字段参数进行定时扫描。</li>\n<li><code>ND_SCANNER_SCHEDULE</code>  ：通过 Cron 语法定义自动扫描的时间，可以利用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jcm9udGFiLmd1cnUv\">https://crontab.guru/</span> 生成你所需的计划时间。</li>\n<li><code>ND_LOGLEVEL</code>  ：如其名，用于记录调试信息的等级，支持  <code>error</code> ,  <code>warn</code> ,  <code>info</code> ,  <code>debug</code> ,  <code>trace</code>  。</li>\n<li><code>ND_SESSIONTIMEOUT</code>  ：用于设置 web UI 登录后无操作的退出时间。</li>\n<li><code>ND_BASEURL</code>  ：该字段用于配置 navidrome 的代理地址，不需要则为空。</li>\n<li><code>ND_DEFAULTLANGUAGE</code>  ：设置默认登录 web UI 时所显示的语言文本，支持语言可看 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25hdmlkcm9tZS9uYXZpZHJvbWUvdHJlZS9tYXN0ZXIvcmVzb3VyY2VzL2kxOG4=\">resources/i18n</span> ；对于中文语言有简体和繁体之分，所以要明确格式，eg：中文简体 -  <code>zh-Hans</code>  ，而中文繁体则为  <code>zh-Hant</code>  。</li>\n<li><code>ND_LASTFM_ENABLED</code>  ：是否需要集成 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGFzdC5mbS8=\">Last.fm</span>，一般用来获取艺人信息，默认打开，如果使用则需要配置  <code>ND_LASTFM_APIKEY</code>  、 <code>ND_LASTFM_SECRET</code>  。由于 <span class=\"exturl\" data-url=\"aHR0cDovL0xhc3QuZm0=\">Last.fm</span> 是在国外架设服务器，国内访问时常抽风，因此建议关闭。</li>\n<li><code>ND_LISTENBRAINZ_ENABLED</code>  ：是否需要集成 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saXN0ZW5icmFpbnoub3JnLw==\">Listen Brainz</span>，用于补全专辑 / 歌曲信息、封面信息等标签信息，默认打开；可用  <code>ND_LISTENBRAINZ_BASEURL</code>  字段覆盖 Listen Brainz 默认地址，例如使用镜像 Listen Brainz 替代。由于 Listen Brainz 是在国外架设服务器，国内访问时常抽风，因此建议关闭。</li>\n<li><code>ND_ENABLEDOWNLOADS</code>  ：是否允许从 Web 界面下载音乐 / 专辑 / 播放列表，建议关闭，默认打开。</li>\n<li><code>ND_ENABLEFAVOURITES</code>  ：是否允许从 Web 界面星标或收藏 歌曲 / 专辑 / 艺术家。</li>\n<li><code>ND_ENABLESHARING</code>  ：是否允许创建分享链接。</li>\n<li><code>ND_ENABLESTARRATING</code>  ：是否在 Web 界面启用 5 星评分机制。</li>\n<li><code>ND_ENABLETRANSCODINGCONFIG</code>  ：是否允许在 Web 界面修改转码设置。</li>\n<li><code>ND_TRANSCODINGCACHESIZE</code>  ：用于设置转码缓存大小，设为 0 时禁用转码缓存，默认为 100MB。</li>\n<li><code>ND_IMAGECACHESIZE</code>  ：用于设置媒体图像缓存大小，设为 0 时禁用媒体图像缓存，默认为 100MB。</li>\n<li><code>ND_SCANNER_ARTISTJOINER</code>  ：当存在多个艺术家时，用于界分每个艺术家，而分割的字符则由该字段控制。</li>\n</ul>\n<p><strong>关于多个艺术家显示：</strong></p>\n<p>在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubmF2aWRyb21lLm9yZy9kb2NzL3VzYWdlL2N1c3RvbXRhZ3MvI2NvbmZpZ3VyaW5nLWN1c3RvbS10YWdz\">Configuring custom tags</span> 中有提到：</p>\n<p><img data-src=\"image-20250816225344016.png\" alt=\"image-20250816225344016\" /></p>\n<p>因此，除了上面的  <code>ND_SCANNER_ARTISTJOINER</code>  字段能定义总的艺术家切割字符外，还可以自定义详细的不同分类的切割字符，因此，我们可以在  <code>navidrome.toml</code>  文件中编写需要的信息：</p>\n<pre><code>vim /app/navidrome/data/navidrome.toml\n</code></pre>\n<p>写入：</p>\n<figure class=\"highlight toml\"><figcaption data-lang=\"TOML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key property\">Tags.Artist.Split</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" / \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" feat. \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"feat.\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" feat \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" ft. \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" ft \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"; \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&amp;\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key property\">Tags.Roles.Split</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\";\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&amp;\"</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><ul>\n<li><code>Tags.Artist.Split</code>  ：表示存在多个艺术家 / 专辑艺术家时，所识别分割的匹配字符。</li>\n<li><code>Tags.Roles.Split</code>  ：表示除了  <code>Tags.Artist.Split</code>  定义的艺术家和专辑艺术家以外的，所有剩余的作词家、作曲家以及编曲家等存在多个时，其所匹配分割的字符。</li>\n</ul>\n<p>如果容器启动后找不到  <code>navidrome.toml</code>  文件识别，可以在  <code>ND_CONFIGFILE</code>  字段中指定位置（该字段默认为  <code>&quot;./navidrome.toml&quot;</code> ）。</p>\n<p>note：</p>\n<p>关于其它的变量属性可以参看官方说明：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubmF2aWRyb21lLm9yZy9kb2NzL3VzYWdlL2NvbmZpZ3VyYXRpb24tb3B0aW9ucy8jZW52aXJvbm1lbnQtdmFyaWFibGVz\">https://www.navidrome.org/docs/usage/configuration-options/#environment-variables</span></p>\n<p>关于加载外部配置属性参数可看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25hdmlkcm9tZS9uYXZpZHJvbWUvYmxvYi9tYXN0ZXIvcmVzb3VyY2VzL21hcHBpbmdzLnlhbWw=\">https://github.com/navidrome/navidrome/blob/master/resources/mappings.yaml</span></p>\n<h2 id=\"音乐库分类管理\"><a class=\"anchor\" href=\"#音乐库分类管理\">#</a> 音乐库分类管理</h2>\n<p>通常情况下音乐库的结构分类应该是：</p>\n<pre><code>.\n|-- Artist A\n|   |-- Albums A\n|   |   |-- Music A\n|   |   |-- Music B\n|   |   |-- ......\n|   |   `-- Music n\n|   |-- Albums B\n|   |   |-- Music A\n|   |   |-- Music B\n|   |   |-- ......\n|   |   `-- Music n\n|   |-- ......\n|   `-- Albums n\n|       |-- Music A\n|       |-- Music B\n|       |-- ......\n|       `-- Music n\n|-- Artist B\n|   |-- Albums A\n|   |   |-- Music A\n|   |   |-- Music B\n|   |   |-- ......\n|   |   `-- Music n\n|   |-- Albums B\n|   |   |-- Music A\n|   |   |-- Music B\n|   |   |-- ......\n|   |   `-- Music n\n|   |-- ......\n|   `-- Albums n\n|       |-- Music A\n|       |-- Music B\n|       |-- ......\n|       `-- Music n\n|-- ......\n`-- Artist n\n    |-- Albums A\n    |   |-- Music A\n    |   |-- Music B\n    |   |-- ......\n    |   `-- Music n\n    |-- Albums B\n    |   |-- Music A\n    |   |-- Music B\n    |   |-- ......\n    |   `-- Music n\n    |-- ......\n    `-- Albums n\n        |-- Music A\n        |-- Music B\n        |-- ......\n        `-- Music n\n</code></pre>\n<p>由于在部署 navidrome 的时候没有集成 lastfm, spotify, deezer 组件，因此，在查看艺术家的时候是没有相应的图片的，所以你可以在你的对应艺术家分类目录下放置艺术家图片即可显示，图片命名以  <code>ND_ARTISTARTPRIORITY</code>  字段的参数为匹配项，默认为  <code>&quot;artist.*, album/artist.*, external&quot;</code>  ；</p>\n<p>eg：</p>\n<p>在目录下放置  <code>artist.jpg</code>  艺术家封图：</p>\n<p><img data-src=\"image-20250817120342493.png\" alt=\"image-20250817120342493\" /></p>\n<p>在查看对应 artist 显示，可以看到已经识别导入了（需要完全扫描一次）：</p>\n<p><img data-src=\"image-20250817120526221.png\" alt=\"image-20250817120526221\" /></p>\n<p>而对于 artist 本地传记显示，目前版本还不支持，但已经有需求提出了，具体可看 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25hdmlkcm9tZS9uYXZpZHJvbWUvaXNzdWVzLzk2MQ==\">https://github.com/navidrome/navidrome/issues/961</span> ；当然，如果对自己网络访问国外服务器有信心的，可以启用  <code>ND_LASTFM_ENABLED</code>  or  <code>ND_SPOTIFY_ID</code>  项，即可实现 artist 封图和简介等相关信息：</p>\n<p><img data-src=\"image-20250817140334532.png\" alt=\"image-20250817140334532\" /></p>\n<h1 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h1>\n<p>浏览器访问  <code>http://localhost:4533</code>  ，首次进入需要设置账号密码：</p>\n<p><img data-src=\"image-20250817135949534.png\" alt=\"image-20250817135949534\" /></p>\n<h2 id=\"音乐标签信息\"><a class=\"anchor\" href=\"#音乐标签信息\">#</a> 音乐标签信息</h2>\n<p>对于歌曲的标签信息写入，只要符合常规的 &quot;ID3Tags&quot; 都能读取，像中文这种，推荐使用 &quot;ID3v2.3 UTF-16&quot; 格式。关于 navidrome 中定制的 tag，可以参看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubmF2aWRyb21lLm9yZy9kb2NzL3VzYWdlL3RhZ2dpbmctZ3VpZGVsaW5lcy8=\">https://www.navidrome.org/docs/usage/tagging-guidelines/</span></p>\n<h1 id=\"安可\"><a class=\"anchor\" href=\"#安可\">#</a> 安可</h1>\n<p>Navidrome 除了网页界面，还支持各种第三方客户端：</p>\n<ul>\n<li>iOS: <span class=\"exturl\" data-url=\"aHR0cDovL21pY2hhZWxzYXBwcy5kay9wbGF5c3ViYXBwLw==\">play:Sub</span>, <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdWJzdHJlYW1lcmFwcC5jb20v\">substreamer</span>, <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0JMZWVFWi9hbXBlcmZ5I3JlYWRtZQ==\">Amperfy</span> and <span class=\"exturl\" data-url=\"aHR0cHM6Ly9pc3ViLmFwcC8=\">iSub</span></li>\n<li>Android: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0NhcHBpZWxsb0FudG9uaW8vdGVtcG8=\">Tempo</span>, <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Nhd3llcmYvQ2FzdGFmaW9yZQ==\">Castafiore</span>, <span class=\"exturl\" data-url=\"aHR0cHM6Ly9wbGF5Lmdvb2dsZS5jb20vc3RvcmUvYXBwcy9kZXRhaWxzP2lkPWdpdGh1Yi5kYW5lcmVuMjAwNS5kc3Vi\">DSub</span>, <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2F1c3RpbnJpZWQvc3VidHJhY2tzI3JlYWRtZQ==\">Subtracks</span>, <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdWJzdHJlYW1lcmFwcC5jb20v\">substreamer</span>, <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3VsdHJhc29uaWMvdWx0cmFzb25pYyNyZWFkbWU=\">Ultrasonic</span>, <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL252bGxzdm0vQXVkaW5hdXQjcmVhZG1l\">Audinaut</span> and <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tdXNpYy5hcXpzY24uY24v\">音流</span></li>\n<li>Web: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3BlZ3Vlcm9zZGMvc3VicGxheWVyI3JlYWRtZQ==\">Subplayer</span>, <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RhbWxhbmQvYWlyc29uaWMtcmVmaXgjcmVhZG1l\">Airsonic Refix</span>, <span class=\"exturl\" data-url=\"aHR0cDovL3NocmltcHphLmdpdGh1Yi5pby9hdXJpYWwv\">Aurial</span>, <span class=\"exturl\" data-url=\"aHR0cDovL2phbXN0YXNoLmNvbS8=\">Jamstash</span> and <span class=\"exturl\" data-url=\"aHR0cDovL3Auc3ViZmlyZXBsYXllci5uZXQv\">Subfire</span></li>\n<li>Desktop: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdWJsaW1lbXVzaWMuYXBwLw==\">Sublime Music</span> (Linux) and <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2plZmZ2bGkvc29uaXhk\">Sonixd</span> (Windows/Linux/macOS)</li>\n<li>CLI: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RyeWZmZWwvamVsbHljbGkjcmVhZG1l\">Jellycli</span> (Windows/Linux) and <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3dpbGRleWVkc2tpZXMvc3RtcCNyZWFkbWU=\">STMP</span> (Linux/macOS)</li>\n<li>Connected Speakers:\n<ul>\n<li>Sonos: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NpbW9qZW5raS9ib25vYiNyZWFkbWU=\">bonob</span></li>\n<li>Alexa: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NyaWNodGVyL2Fza3NvbmljI3JlYWRtZQ==\">AskSonic</span></li>\n</ul>\n</li>\n<li>Other:\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3dhcndpY2toL3BsdWdpbi5hdWRpby5zdWJzb25pYyNyZWFkbWU=\">Subsonic Kodi Plugin</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0JvYkhhc05vU291bC9wbHVnaW4uYXVkaW8ubmF2aWRyb21lI3JlYWRtZQ==\">Navidrome Kodi Plugin</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZhbmdmdWZ1L2h0dHBkaXJmcyNyZWFkbWU=\">HTTPDirFS</span></li>\n</ul>\n</li>\n</ul>\n<p>在这里，安卓手机客户端可以尝试使用 Temop 或 Castafiore，当然还有其它的，具体哪个好用、谁才适合，则看自己的使用需求了。</p>\n<p>下面为 Tempo 的使用界面：</p>\n<p><img data-src=\"image-20250816160120279.png\" alt=\"image-20250816160120279\" /></p>\n<p><img data-src=\"image-20250816160132127.png\" alt=\"image-20250816160132127\" /></p>\n<p><img data-src=\"image-20250816160140991.png\" alt=\"image-20250816160140991\" /></p>\n<p>Castafiore 使用界面：</p>\n<p><img data-src=\"image-20250817151224772.png\" alt=\"image-20250817151224772\" /></p>\n<p><img data-src=\"image-20250817151230932.png\" alt=\"image-20250817151230932\" /></p>\n<p><img data-src=\"image-20250817151240959.png\" alt=\"image-20250817151240959\" /></p>\n",
            "tags": [
                "docker",
                "nas"
            ]
        },
        {
            "id": "https://arachnid.cc/docker-deployment-of-qbittorrent/",
            "url": "https://arachnid.cc/docker-deployment-of-qbittorrent/",
            "title": "docker 部署之 qbittorrent 资源下载",
            "date_published": "2025-03-08T01:54:09.000Z",
            "content_html": "<blockquote>\n<p>Version：<a href=\"https://github.com/linuxserver/docker-qbittorrent\"><strong>qBittorrent</strong></a> v5.0.4</p>\n</blockquote>\n<p><img data-src=\"image-20250621175702013.png\" alt=\"qbittorrent login\" /></p>\n<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<p>qBittorrent 是一款免费的开源种子下载工具，作为 µTorrent 的替代品。它在所有平台上都提供相同的功能，包括 Windows、Linux 和 macOS。该应用程序还配备了一个可扩展的搜索引擎以及 Web UI 远端，以最大化你的 torrent 体验。使用 qBittorrent，你可以在多个平台上轻松下载你喜爱的内容。</p>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucWJpdHRvcnJlbnQub3JnLw==\">https://www.qbittorrent.org/</span></p>\n<p>项目：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xpbnV4c2VydmVyL2RvY2tlci1xYml0dG9ycmVudA==\">https://github.com/linuxserver/docker-qbittorrent</span></p>\n<p><img data-src=\"image-20250621180126200.png\" alt=\"qbittorrent\" /></p>\n<h1 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h1>\n<p>创建 qbittorrent 数据文件存放位置：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># $PATH 为你的下载存放路径</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /app/qbittorrent/config /<span class=\"token operator\">&lt;</span><span class=\"token environment constant\">$PATH</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /app/qbittorrent</pre></td></tr></table></figure><p>添加  <code>docker-compose.yml</code>  配置文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost:/app/navidrome] #\"></td><td><pre><span class=\"token function\">vim</span> docker-compose.yml</pre></td></tr></table></figure><p>写入：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"><span>docker-compose.yml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">qbittorrent</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> linuxserver/qbittorrent<span class=\"token punctuation\">:</span>latest</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> qbittorrent</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">-</span> PUID=0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">-</span> PGID=0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">-</span> TZ=Asia/Shanghai</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">-</span> WEBUI_PORT=9350 <span class=\"token comment\"># Web UI 访问端口</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">-</span> TORRENTING_PORT=18960 <span class=\"token comment\"># 容器的监听端口</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">-</span> /app/qbittorrent/config<span class=\"token punctuation\">:</span>/config</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">-</span> /&lt;$PATH<span class=\"token punctuation\">></span>/downloads<span class=\"token punctuation\">:</span>/downloads <span class=\"token comment\">#optional</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">-</span> 9350<span class=\"token punctuation\">:</span><span class=\"token number\">9350</span> <span class=\"token comment\"># 映射须一致</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">-</span> 18960<span class=\"token punctuation\">:</span><span class=\"token number\">18960</span> <span class=\"token comment\"># TCP 监听端口</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">-</span> 18960<span class=\"token punctuation\">:</span>18960/udp <span class=\"token comment\"># UDP 监听端口</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always</pre></td></tr></table></figure><p>note：</p>\n<p><code>TORRENTING_PORT</code>  最好避免填写  <code>6881</code>  端口，运营商一般屏蔽该端口，选  <code>10000</code>  后的比较好；当改动该项的时候，底下的  <code>TCP 监听端口</code>  和  <code>UDP 监听端口</code>  也要一同改变；如果想通过在 Web UI 上变换端口，则只是当前保存生效，重启容器后会自动变回  <code>TORRENTING_PORT</code>  的配置端口。</p>\n<h1 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h1>\n<p>访问  <code>http://localhost:9350</code>  ，初次登录，默认用户名（admin）和密码，通过启动日志获取；可在主机通过终端命令  <code>docker logs qbittorrent</code>  获取：</p>\n<p><img data-src=\"2034870-20231230013241798-192308779.png\" alt=\"img\" /></p>\n<h2 id=\"语言切换\"><a class=\"anchor\" href=\"#语言切换\">#</a> 语言切换</h2>\n<p>在  <code>设置</code>  -&gt;  <code>行为</code>  中找到语言，进行你需要的配置，然后点击保存：</p>\n<p><img data-src=\"image-20250615115000144.png\" alt=\"image-20250615115000144\" /></p>\n<h2 id=\"密码修改\"><a class=\"anchor\" href=\"#密码修改\">#</a> 密码修改</h2>\n<p>由于初始化的账号密码随机性，可以在  <code>设置</code>  -&gt;  <code>WebUI</code>  中的验证更改：</p>\n<p><img data-src=\"image-20250615115248894.png\" alt=\"image-20250615115248894\" /></p>\n<h2 id=\"更改监听端口\"><a class=\"anchor\" href=\"#更改监听端口\">#</a> 更改监听端口</h2>\n<p>如出现默认端口被一般 PT 站点禁用，显示 ‘Port 6881 is blacklisted’ 报错，或者种子下载没速度（非网络问题），则尝试在 qbittorrent 变更监听端口：</p>\n<p><img data-src=\"image-20250615115450536.png\" alt=\"image-20250615115450536\" /></p>\n<h2 id=\"tracker-服务器\"><a class=\"anchor\" href=\"#tracker-服务器\">#</a> tracker 服务器</h2>\n<p>部分冷门资源会导致下载缓慢，这时可以添加 BT 下载所需的 tracker 服务器列表：</p>\n<p><img data-src=\"image-20250615120148452.png\" alt=\"image-20250615120148452\" /></p>\n<h2 id=\"下载路径\"><a class=\"anchor\" href=\"#下载路径\">#</a> 下载路径</h2>\n<p>不管是默认下载路径亦或是手动指定下载路径：</p>\n<p><img data-src=\"image-20250615120359623.png\" alt=\"image-20250615120359623\" /></p>\n<p><img data-src=\"image-20250615120503870.png\" alt=\"image-20250615120503870\" /></p>\n<p>都需要根据 Docker 配置里的  <code>volumes</code>  字段中设置的下载文件夹映射路径配置，可以是底下的子文件夹，但不能更换为其范围以外的路径，eg：可以是  <code>/downloads/movie</code>  或  <code>/downloads/video</code>  等子路径，不能是  <code>/movie</code>  或  <code>/video</code>  这些非配置上的路径。</p>\n",
            "tags": [
                "docker"
            ]
        },
        {
            "id": "https://arachnid.cc/docker-deployment-of-komga/",
            "url": "https://arachnid.cc/docker-deployment-of-komga/",
            "title": "docker 部署之 komga 漫画管理",
            "date_published": "2024-12-17T15:33:29.000Z",
            "content_html": "<blockquote>\n<p>Version：<a href=\"https://github.com/gotson/komga/tree/1.15.1\"><strong>komga</strong></a> v1.15.1</p>\n</blockquote>\n<p><img data-src=\"image-20250621180216042.png\" alt=\"komga login\" /></p>\n<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<p>komga 是一个自托管的漫画管理程序，支持常见的 CBZ、CBR、PDF 、EPUB 格式的漫画或文件，可以直接在网页端阅读漫画，并加以修改、编辑漫画的元数据。同时它支持全平台运行，</p>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9rb21nYS5vcmcv\">https://komga.org/</span></p>\n<p>项目地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dvdHNvbi9rb21nYS90cmVlLzEuMTUuMQ==\">https://github.com/gotson/komga/tree/1.15.1</span></p>\n<p><img data-src=\"image-20250622151001079.png\" alt=\"komga\" /></p>\n<h1 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h1>\n<p>为你的 komga 存放创建数据和配置文件夹：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># $PATH 为你存储盘的路径</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /<span class=\"token operator\">&lt;</span><span class=\"token environment constant\">$PATH</span><span class=\"token operator\">></span>/komga/config /<span class=\"token operator\">&lt;</span><span class=\"token environment constant\">$PATH</span><span class=\"token operator\">></span>/komga/data</pre></td></tr></table></figure><p>运行 Docker：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">docker</span> pull gotson/komga:latest</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">--name</span> komga <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-v</span> /<span class=\"token operator\">&lt;</span><span class=\"token environment constant\">$PATH</span><span class=\"token operator\">></span>/komga/data:/data <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-v</span> /<span class=\"token operator\">&lt;</span><span class=\"token environment constant\">$PATH</span><span class=\"token operator\">></span>/komga/config:/config <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-p</span> <span class=\"token number\">25600</span>:25600 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">TZ</span><span class=\"token operator\">=</span>Asia/Shanghai <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">--restart</span> always <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">--user</span> <span class=\"token string\">\"0:0\"</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"11\"></td><td data-command=\"\"></td><td><pre>  gotson/komga</pre></td></tr></table></figure><p>参数解释：</p>\n<ul>\n<li><code>-v /&lt;$PATH&gt;/komga/data:/data</code>  和  <code>-v /&lt;$PATH&gt;/komga/config:/config</code>  ：将对应存储盘目录下的  <code>/komga/data</code>  和  <code>/komga/config</code>  目录分别映射进容器的  <code>/data</code>  和  <code>/config</code>  路径，用于数据和配置的持久化。</li>\n<li><code>-e TZ=Asia/Shanghai</code>  ：设置容器的环境变量  <code>TZ</code> ，用于指定时区。</li>\n<li><code>--user &quot;0:0&quot;</code>  ：以 root 用户运行容器，这对于某些环境的权限管理是必要的。</li>\n</ul>\n<p>note：用 docker 容器安装的话，在  <code>添加库</code>  时选择的根文件夹填写的是容器内部的路径（即上面的  <code>/data</code>  目录下）。</p>\n<h1 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h1>\n<p>浏览器输入访问  <code>http://localhost:25600</code>  ，初次进入提示创建邮箱密码：</p>\n<p><img data-src=\"image-20250622174815622.png\" alt=\"image-20250622174815622\" /></p>\n<h2 id=\"创建漫画库\"><a class=\"anchor\" href=\"#创建漫画库\">#</a> 创建漫画库</h2>\n<p>在左侧栏的  <code>库</code>  旁边有个  <code>+</code>  符号，点击添加：</p>\n<p><img data-src=\"image-20250622175219989.png\" alt=\"image-20250622175219989\" /></p>\n<p>然后弹出窗口，为当前库命名，并选择指向的路径（注意：填写的是容器内部的路径，即  <code>/data</code>  路径及其子路径）：</p>\n<p><img data-src=\"image-20250622175339875.png\" alt=\"image-20250622175339875\" /></p>\n<p>扫描器这里，你可以选择你想要的扫描操作，以及需要支持的扫描类型（漫画书存档即  <code>.cbz</code>   <code>.cbr</code>  格式，其实与  <code>.zip</code>   <code>.rar</code>  格式一样，同时也可以解析  <code>.zip</code>  格式文件）：</p>\n<p><img data-src=\"image-20250622180001458.png\" alt=\"image-20250622180001458\" /></p>\n<p>剩下两项，一般保持默认即可，如有其它需要则自行更改。</p>\n<h2 id=\"元数据编辑\"><a class=\"anchor\" href=\"#元数据编辑\">#</a> 元数据编辑</h2>\n<p>如果漫画文件中存在  <code>ComicInfo.xml</code>  元数据文件，那么会被 Komga 直接识别，就无需手动补齐元数据了。但是一般情况下是没有的，所以需要手动补充。如果手动编辑，分为两种：一种是单本编辑，另一种是整册编辑。</p>\n<ol>\n<li>\n<p>单本编辑</p>\n<p>如果有多层结构，进入到最里层，出现下图在单本中有显示阅读图标的，那么在这里的配置就是单本编辑：</p>\n<p><img data-src=\"image-20250622181358937.png\" alt=\"image-20250622181358937\" /></p>\n<p>单本编辑一般有如下编辑：</p>\n<p><img data-src=\"image-20250622181445324.png\" alt=\"image-20250622181445324\" /></p>\n</li>\n<li>\n<p>整册编辑</p>\n<p>像一般多卷的单行本，存在多个连载本，这时候你可以整册编辑：</p>\n<p><img data-src=\"image-20250622181817974.png\" alt=\"image-20250622181817974\" /></p>\n<p>对于整册编辑，如果单本中与部分属性没有配置保持默认，而整册中却配置了该属性，那么在单本显示会映射出整册的配置属性（即： <code>单本属性</code>  &gt;  <code>整册属性</code>  &gt;  <code>默认属性(null)</code> ）：</p>\n<p><img data-src=\"image-20250622182453623.png\" alt=\"image-20250622182453623\" /></p>\n</li>\n</ol>\n<h2 id=\"漫画归类整理\"><a class=\"anchor\" href=\"#漫画归类整理\">#</a> 漫画归类整理</h2>\n<p>komge 归类首要识别的是内嵌的  <code>ComicInfo.xml</code>  文件，根据其字段信息来帮你归类为某个系列，但一般情况下我们获取的漫画都并非自带  <code>ComicInfo.xml</code>  文件，因此往往需要手动添加修改，或以脚本自动补充；除了用脚本自动补充便捷归类外，常见的方式就是利用文件夹进行整理归类，期间你可以设立多级子文件夹，最后会以存档的上一级文件夹名为默认的系列名，即：</p>\n<pre><code>.\n|-- [敖幼祥] 乌龙院\n|   |-- [敖幼祥] 乌龙院之爆笑系列\n|   |   |-- 第01卷-豆腐罗曼史.zip\n|   |   |-- 第02卷-红烧蔡捕头.zip\n|   |   |-- ......\n|   |   `-- 第10卷-六合大战.zip\n|   |-- [敖幼祥] 乌龙院之黑柠檬\n|   |   |-- 01.zip\n|   |   |-- 02.zip\n|   |   `-- 03.zip\n|   |-- [敖幼祥] 乌龙院之活宝系列\n|   |   |-- 01.zip\n|   |   |-- 02.zip\n|   |   |-- ......\n|   |   `-- 43.zip\n|   |-- [敖幼祥] 乌龙院之名作剧场\n|   |   |-- 七鲜鱼丸.zip\n|   |   `-- 御兽园.zip\n|   |-- [敖幼祥] 乌龙院之前传\n|   |   |-- 01.zip\n|   |   |-- 02.zip\n|   |   |-- ......\n|   |   `-- 78.zip\n|   `-- [敖幼祥] 乌龙院之四格系列\n|       |-- 01.zip\n|       |-- 02.zip\n|       |-- ......\n|       `-- 06.zip\n|-- [北条司] 城市猎人\n|   |-- [Vol_01].zip\n|   |-- [Vol_02].zip\n|   |-- ......\n|   |-- [Vol_35].zip\n|   `-- 全 35 卷.txt\n|-- ......\n`-- [鳥山明] 七龙珠\n    |-- [龍珠完全版][鳥山明][文傳]Vol_01.zip\n    |-- [龍珠完全版][鳥山明][文傳]Vol_02.zip\n    |-- ......\n    |-- [龍珠完全版][鳥山明][文傳]Vol_34.zip\n    |-- [龍珠完全版公式手冊_Dragonball_FOREVER_人造人篇～魔人布歐篇][鳥山明][文傳].zip\n    |-- [龍珠完全版公式手冊_Dragonball_LANDMARK_少年篇～菲利篇][鳥山明][文傳].zip\n    `-- 全 34 卷.txt\n</code></pre>\n<p>像 “乌龙院” 系列，即使有二级结构，但实际出来的还是一个单一系列：</p>\n<p><img data-src=\"image-20250629113512571.png\" alt=\"image-20250629113512571\" /></p>\n<p><img data-src=\"image-20250629114450732.png\" alt=\"image-20250629114450732\" /></p>\n<h2 id=\"漫画导入\"><a class=\"anchor\" href=\"#漫画导入\">#</a> 漫画导入</h2>\n<p>komga 在面板上支持导入，嘛，一般本人是手动在存储文件夹里导入的；不过面板这里的导入可以用来对比替换原有漫画（比如由于漫画质量、缺页、乱页等需要重新收录），不过这个使用起来也挺麻烦的，需要你的漫画信息齐全，或者说部分信息必须要有。。。因此，强烈推荐还是手动比较！</p>\n<p>如果你真的想用这个功能，那么你需要做到以下几步：</p>\n<p>1、为你的导入漫画单独安置一个导入文件夹，然后里面存放需要导入的漫画，可以拥有子目录：</p>\n<p><img data-src=\"image-20250622194057342.png\" alt=\"image-20250622194057342\" /></p>\n<p>2、进入面板的  <code>导入</code>  窗口，选择对应的导入路径，点击扫描：</p>\n<p><img data-src=\"image-20250622194600873.png\" alt=\"image-20250622194600873\" /></p>\n<p>3、扫描出来后，你可以检查校对导入的漫画：</p>\n<p><img data-src=\"image-20250622195033818.png\" alt=\"image-20250622195033818\" /></p>\n<p>4、对于有系列和没系列的区别，如果你没有按照提示选择系列，那么后期执行导入将跳过未设置的漫画：</p>\n<p><img data-src=\"image-20250622195449602.png\" alt=\"image-20250622195449602\" /></p>\n<p>关于系列的设置，是在整册的设置中配置  <code>常规</code>  的  <code>标题</code>  ，或者  <code>副标题</code>  的  <code>标签</code>  属性（注意：它们的配置都必须有锁，否则是在导入中查询不到的）：</p>\n<p><img data-src=\"image-20250622200804478.png\" alt=\"image-20250622200804478\" /></p>\n<p><img data-src=\"image-20250622200003954.png\" alt=\"image-20250622200003954\" /></p>\n<p>因此，如果是替换的话，那么需要你在原有的漫画中配置该属性，而对于新建的，则需要建立一个整册文件夹（实际就是在库目录里建一个为了存放新建漫画的子文件夹），才能搜索到系列：</p>\n<p><img data-src=\"image-20250622201424811.png\" alt=\"image-20250622201424811\" /></p>\n<p>5、重设漫画导入后的名称，如果已经配置了  <code>系列</code>  项，那么你能看到该系列里的列出的所有存在的文件（见下面框选位置）：</p>\n<p><img data-src=\"image-20250622201701331.png\" alt=\"image-20250622201701331\" /></p>\n<p>6、新建与替换的关系：</p>\n<p><img data-src=\"image-20250622214357246.png\" alt=\"image-20250622214357246\" /></p>\n<p>对于你想新建的漫画，在  <code>编号</code>  项中，你可以任意自定义未冲突的号码或者留空；而对于想要替换的漫画，那么你需要在  <code>编号</code>  项中选择你要替换的编号，像在原有的漫画中，可以在单本编辑中查看，或者在整册上看前缀编号：</p>\n<p><img data-src=\"image-20250622215045849.png\" alt=\"image-20250622215045849\" /></p>\n<p>然后如果是替换的漫画，你可以点击  <code>详情</code>  或者  <code>图片查询</code>  按键来对比：</p>\n<p><img data-src=\"image-20250622215326812.png\" alt=\"image-20250622215326812\" /></p>\n<p><img data-src=\"image-20250622215445165.png\" alt=\"image-20250622215445165\" /></p>\n<p>7、确定没问题后，然后点击  <code>导入</code>  ：</p>\n<p><img data-src=\"image-20250622201829617.png\" alt=\"image-20250622201829617\" /></p>\n<p>期间会有提示框：</p>\n<p><img data-src=\"image-20250622215710185.png\" alt=\"image-20250622215710185\" /></p>\n<p>8、待所有任务完成后，在历史记录中查看是否成功：</p>\n<p><img data-src=\"image-20250622215851952.png\" alt=\"image-20250622215851952\" />9、进入整册查看效果：</p>\n<p><img data-src=\"image-20250622220552349.png\" alt=\"image-20250622220552349\" /></p>\n<h1 id=\"安可\"><a class=\"anchor\" href=\"#安可\">#</a> 安可</h1>\n<p>关于 App 客户端，这里可以用官方的推荐的：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rb21nYS5vcmcvZG9jcy9jYXRlZ29yeS9yZWFkZXJz\">https://komga.org/docs/category/readers</span></p>\n<p>一般常用的有 <strong>Tachiyomi</strong> 、<strong>Mihon</strong> 、<strong>tachiyomiJ2K</strong> ；前者由于版权等一系列问题被迫删库跑路了。。。所以衍生出后面两个，当然也还有其它更多的 forks 版本，这里就不一一说了。</p>\n<p>选择导入插件仓库地址：</p>\n<pre><code>https://raw.githubusercontent.com/keiyoushi/extensions/repo/index.min.json\n</code></pre>\n<p>或者手动下载 komga 插件：</p>\n<pre><code>https://keiyoushi.github.io/extensions/\n</code></pre>\n<p>然后选择搜索 komga：</p>\n<p><img data-src=\"image-20250814203137641.png\" alt=\"image-20250814203137641\" /></p>\n<p>客户端展示：</p>\n<p>1、 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21paG9uYXBwL21paG9u\">Mihon</span>：</p>\n<p><img data-src=\"image-20250813222752267.png\" alt=\"image-20250813222752267\" /></p>\n<p><img data-src=\"image-20250813223006155.png\" alt=\"image-20250813223006155\" /></p>\n<p><img data-src=\"image-20250813222813431.png\" alt=\"image-20250813222813431\" /></p>\n<p>2、 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0pheXMyS2luZ3MvdGFjaGl5b21pSjJL\">tachiyomiJ2K</span>：</p>\n<p><img data-src=\"image-20250813215259060.png\" alt=\"image-20250813215259060\" /></p>\n<p><img data-src=\"image-20250813215333781.png\" alt=\"image-20250813215333781\" /></p>\n",
            "tags": [
                "docker"
            ]
        },
        {
            "id": "https://arachnid.cc/docker-deployment-of-photoview/",
            "url": "https://arachnid.cc/docker-deployment-of-photoview/",
            "title": "docker 部署之 photoview 图片相册",
            "date_published": "2024-12-17T15:33:29.000Z",
            "content_html": "<blockquote>\n<p>Version：<a href=\"https://github.com/photoview/photoview/tree/v2.4.0\"><strong>photoview</strong></a> 2.4.0</p>\n</blockquote>\n<p><img data-src=\"image-20250621174347104.png\" alt=\"photoview login\" /></p>\n<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<p>Photoview 是一个简单且用户友好的照片库，是专为摄影师制作，旨在提供一个简单且快速的方式来导航目录，其中包含数以千计的高分辨率照片。</p>\n<p>您可以将 Photoview 配置为在文件系统的某个目录中查找照片和视频。 扫描仪会自动拾取您的媒体并开始生成缩略图图像，以使浏览速度加快。</p>\n<p>当您的媒体被扫描后，它们会显示在网站上，其组织方式与文件系统相同。</p>\n<p>特点：</p>\n<ul>\n<li>保持与文件系统架构一样的目录显示。</li>\n<li>多用户管理。</li>\n<li>支持公共链接共享，并可选密码保护。</li>\n<li>支持 RAW 文件格式和 EXIF 解析。</li>\n<li>支持多种常见视频格式，并自动针对网络优化。</li>\n<li>自动人脸识别，并按人像分组。</li>\n<li>支持低中高分辨率，优先加载缩略图。</li>\n<li>所有媒体资源受 Cookie 令牌保护，所有密码经过哈希处理，API 采用严格的 CORS 策略。</li>\n</ul>\n<p>项目地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Bob3Rvdmlldy9waG90b3ZpZXc=\">https://github.com/photoview/photoview</span></p>\n<p><img data-src=\"image-20250621175519441.png\" alt=\"photoview\" /></p>\n<h1 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h1>\n<p>创建 photoview 配置文件夹及相册存放位置：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># $PATH 为你的相册存放路径</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@localhost:/app/photoview] #\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /app/photoview</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root@localhost:/app/photoview] #\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /<span class=\"token operator\">&lt;</span><span class=\"token environment constant\">$PATH</span><span class=\"token operator\">></span>/pictures</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /app/photoview</pre></td></tr></table></figure><p>根据官方说明，由于配置参数过多，因此采用 docker compose 的方法，添加  <code>docker-compose.yml</code>  配置文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">vim</span> docker-compose.yml</pre></td></tr></table></figure><p>写入：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"><span>docker-compose.yml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">photoview</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> viktorstrate/photoview<span class=\"token punctuation\">:</span>latest</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> photoview</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> photoview</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">user</span><span class=\"token punctuation\">:</span> root</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">stop_grace_period</span><span class=\"token punctuation\">:</span> 10s</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"2430:80\"</span> <span class=\"token comment\">## HTTP port (host:container)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">## This ensures that DB is initialized and ready for connections.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">## Comment out the entire `depends_on` section if PHOTOVIEW_DATABASE_DRIVER is set to `sqlite` in the .env</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token key atrule\">mariadb</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token key atrule\">condition</span><span class=\"token punctuation\">:</span> service_healthy</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">## Security options for some restricted systems</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">security_opt</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">-</span> seccomp<span class=\"token punctuation\">:</span>unconfined</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">-</span> apparmor<span class=\"token punctuation\">:</span>unconfined</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token key atrule\">PHOTOVIEW_DATABASE_DRIVER</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">&#123;</span>PHOTOVIEW_DATABASE_DRIVER<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token comment\">## Comment out the next variable in the case PHOTOVIEW_DATABASE_DRIVER is set to `sqlite` or `postgres` in the .env</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token key atrule\">PHOTOVIEW_MYSQL_URL</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"$&#123;MARIADB_USER&#125;:$&#123;MARIADB_PASSWORD&#125;@tcp(photoview-mariadb)/$&#123;MARIADB_DATABASE&#125;\"</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token comment\">## Uncomment the next line if PHOTOVIEW_DATABASE_DRIVER is set to `sqlite` in the .env</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token comment\"># PHOTOVIEW_SQLITE_PATH: $&#123;PHOTOVIEW_SQLITE_PATH&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token key atrule\">PHOTOVIEW_LISTEN_IP</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"0.0.0.0\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token comment\">## Optional: If you are using Samba/CIFS-Share and experience problems with \"directory not found\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token comment\">## Enable the following Godebug</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token comment\"># - GODEBUG=asyncpreemptoff=1</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token comment\">## Optional: To enable map related features, you need to create a mapbox token.</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token comment\">## A token can be generated for free here https://account.mapbox.com/access-tokens/</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token comment\">## It's a good idea to limit the scope of the token to your own domain, to prevent others from using it.</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token key atrule\">MAPBOX_TOKEN</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">&#123;</span>MAPBOX_TOKEN<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token comment\">## Example:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token comment\">## - \"/host/folder:/container/folder\"</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"/etc/localtime:/etc/localtime:ro\"</span> <span class=\"token comment\">## use local time from host</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"/etc/timezone:/etc/timezone:ro\"</span>   <span class=\"token comment\">## use timezone from host</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token comment\">## Uncomment the next line if PHOTOVIEW_DATABASE_DRIVER is set to `sqlite` in the .env</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token comment\"># - \"$&#123;HOST_PHOTOVIEW_LOCATION&#125;/database:/home/photoview/database\"</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"$&#123;HOST_PHOTOVIEW_LOCATION&#125;/storage:/home/photoview/media-cache\"</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token comment\">## Change This in the .env file: to the directory where your photos are located on your server.</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token comment\">## You can mount multiple paths if your photos are spread across multiple directories.</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token comment\">## The same path as the container path set here, you'll need to provide on the Photoview's init page (the one between the ':' chars).</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token comment\">## If you mount several folders, provide the path to the parent one on the init page.</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      <span class=\"token comment\">## If you mount several folders, make sure that there are no direct mappings to the media root folder.</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      <span class=\"token comment\">## This means that you need to also modify the container path of the HOST_PHOTOVIEW_MEDIA_ROOT</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token comment\">## to something like '/photos/main'. Note that this new name ('main' in this example) will become an album in Photoview.</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"$&#123;HOST_PHOTOVIEW_MEDIA_ROOT&#125;:/photos:ro\"</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token comment\">## *Additional* media folders can be mounted like this (set the variable in .env file)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token comment\">## Note that a mount cannot be located in a subfolder of another mount.</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token comment\"># - \"$&#123;HOST_PHOTOVIEW_MEDIA_PRIVATE&#125;:/private:ro\"</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token comment\">## Comment out the `mariadb` service if PHOTOVIEW_DATABASE_DRIVER is set to `sqlite` or `postgres` in the .env</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token key atrule\">mariadb</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mariadb<span class=\"token punctuation\">:</span>lts</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> photoview<span class=\"token punctuation\">-</span>mariadb</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> photoview<span class=\"token punctuation\">-</span>mariadb</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> unless<span class=\"token punctuation\">-</span>stopped</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token key atrule\">stop_grace_period</span><span class=\"token punctuation\">:</span> 5s</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token comment\">## Optimized MariaDB startup command for better performance and compatibility</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> mariadbd <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>innodb<span class=\"token punctuation\">-</span>buffer<span class=\"token punctuation\">-</span>pool<span class=\"token punctuation\">-</span>size=512M <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>transaction<span class=\"token punctuation\">-</span>isolation=READ<span class=\"token punctuation\">-</span>COMMITTED <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>character<span class=\"token punctuation\">-</span>set<span class=\"token punctuation\">-</span>server=utf8mb4 <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>collation<span class=\"token punctuation\">-</span>server=utf8mb4_unicode_ci <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>max<span class=\"token punctuation\">-</span>connections=512 <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>innodb<span class=\"token punctuation\">-</span>rollback<span class=\"token punctuation\">-</span>on<span class=\"token punctuation\">-</span>timeout=OFF <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>innodb<span class=\"token punctuation\">-</span>lock<span class=\"token punctuation\">-</span>wait<span class=\"token punctuation\">-</span>timeout=120</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token key atrule\">security_opt</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">## see https://github.com/MariaDB/mariadb-docker/issues/434#issuecomment-1136151239</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>      <span class=\"token punctuation\">-</span> seccomp<span class=\"token punctuation\">:</span>unconfined</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>      <span class=\"token punctuation\">-</span> apparmor<span class=\"token punctuation\">:</span>unconfined</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>      <span class=\"token key atrule\">MARIADB_AUTO_UPGRADE</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1\"</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token key atrule\">MARIADB_DATABASE</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">&#123;</span>MARIADB_DATABASE<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      <span class=\"token key atrule\">MARIADB_USER</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">&#123;</span>MARIADB_USER<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>      <span class=\"token key atrule\">MARIADB_PASSWORD</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">&#123;</span>MARIADB_PASSWORD<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>      <span class=\"token key atrule\">MARIADB_ROOT_PASSWORD</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">&#123;</span>MARIADB_ROOT_PASSWORD<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>      <span class=\"token comment\">## Example:</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>      <span class=\"token comment\">## - \"/host/folder:/container/folder\"</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"/etc/localtime:/etc/localtime:ro\"</span> <span class=\"token comment\">## use local time from host</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"/etc/timezone:/etc/timezone:ro\"</span>   <span class=\"token comment\">## use timezone from host</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"$&#123;HOST_PHOTOVIEW_LOCATION&#125;/database/mariadb:/var/lib/mysql\"</span> <span class=\"token comment\">## DO NOT REMOVE</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token key atrule\">healthcheck</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>      <span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span> healthcheck.sh <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>connect <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>innodb_initialized</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>      <span class=\"token key atrule\">interval</span><span class=\"token punctuation\">:</span> 1m</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>      <span class=\"token key atrule\">timeout</span><span class=\"token punctuation\">:</span> 5s</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>      <span class=\"token key atrule\">retries</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>      <span class=\"token key atrule\">start_period</span><span class=\"token punctuation\">:</span> 3m</pre></td></tr></table></figure><p>添加  <code>.env</code>  环境变量：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost:/app/photoview] #\"></td><td><pre><span class=\"token function\">vim</span> .env</pre></td></tr></table></figure><p>写入：</p>\n<figure class=\"highlight text\"><figcaption data-lang=\"text\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>##================***================##</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>## These are the environment setup variables.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>## Start setting up your instance from here.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>## Syntax of the .env file is next:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>## VARIABLE_NAME=variable value with everything after the '=' and till the end of the line.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>## The variables with values, set in the docker-compose.yml directly, are for advanced configuration.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>##================***================##</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>##----------Host variables-----------##</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>## This is the current folder, where all Photoview files and folders (except of your media library) are located</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>HOST_PHOTOVIEW_LOCATION=/app/photoview</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>## This is where your original photos and videos located.</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>## Provide here the path to single root folder for your media collection.</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>HOST_PHOTOVIEW_MEDIA_ROOT=/&lt;$PATH>/pictures</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>## If you'd like to map multiple folders from different locations, create additional variables</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>## here like the next one and modify the docker-compose.yml to match them and use in volume mappings.</pre></td></tr><tr><td data-num=\"18\"></td><td><pre># HOST_PHOTOVIEW_MEDIA_PRIVATE=</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>##-----------------------------------##</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>##-------Photoview variables---------##</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>## PHOTOVIEW_DATABASE_DRIVER could have one of values: `mysql` (default), `sqlite`, `postgres`</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>PHOTOVIEW_DATABASE_DRIVER=mysql</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>## Optional: To enable map related features, you need to create a mapbox token.</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>## A token can be generated for free here https://account.mapbox.com/access-tokens/</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>## It's a good idea to limit the scope of the token to your own domain, to prevent others from using it.</pre></td></tr><tr><td data-num=\"28\"></td><td><pre># MAPBOX_TOKEN=yourToken</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>##-----------------------------------##</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>##----------Video variables----------##</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>## Set the hardware acceleration when encoding videos.</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>## Support `qsv`, `vaapi`, `nvenc`.</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>## Only `qsv` is verified with `/dev/dri` devices.</pre></td></tr><tr><td data-num=\"35\"></td><td><pre># PHOTOVIEW_VIDEO_HARDWARE_ACCELERATION=</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>##-----------------------------------##</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>##--------MariaDB variables----------##</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>## Comment out these variables if PHOTOVIEW_DATABASE_DRIVER is `sqlite` or `postgres`</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>## Use password generator to generate secret values and replace these defaults</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>MARIADB_DATABASE=photoview</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>MARIADB_USER=photoview</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>## Note: If your `MARIADB_PASSWORD` contains special characters (e.g. `@`), make sure to URL-encode them.</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>MARIADB_PASSWORD=photosecret</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>MARIADB_ROOT_PASSWORD=superphotosecret</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>##-----------------------------------##</pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>##---------SQLite variables----------##</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>## Uncomment the next line if PHOTOVIEW_DATABASE_DRIVER is `sqlite`</pre></td></tr><tr><td data-num=\"50\"></td><td><pre># PHOTOVIEW_SQLITE_PATH=/app/photoview/database/photoview.db</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>##-----------------------------------##</pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>##-------PostgreSQL variables--------##</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>## Uncomment the next lines if PHOTOVIEW_DATABASE_DRIVER is `postgres`</pre></td></tr><tr><td data-num=\"55\"></td><td><pre># PGSQL_DATABASE=photoview</pre></td></tr><tr><td data-num=\"56\"></td><td><pre># PGSQL_USER=photoview</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>## Note: If your `PGSQL_PASSWORD` contains special characters (e.g. `@`), make sure to URL-encode them.</pre></td></tr><tr><td data-num=\"58\"></td><td><pre># PGSQL_PASSWORD=superphotosecret</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>## See https://www.postgresql.org/docs/current/libpq-ssl.html for possible ssl modes</pre></td></tr><tr><td data-num=\"60\"></td><td><pre># PGSQL_SSL_MODE=prefer</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>##-----------------------------------##</pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>##-------Watchtower variables--------##</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>## The POLL_INTERVAL in sec</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>WATCHTOWER_POLL_INTERVAL=86400</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>WATCHTOWER_TIMEOUT=30s</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>WATCHTOWER_CLEANUP=true</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>##\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\//////////////////##</pre></td></tr></table></figure><p>note：</p>\n<p>一般需要修改的是  <code>Photoview variables</code>  中的内容。</p>\n<p>修改完成后，使用以下命令进行部署：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost:/app/photoview] #\"></td><td><pre><span class=\"token function\">docker-compose</span> up <span class=\"token parameter variable\">-d</span></pre></td></tr></table></figure><p>在这里不启用地点功能，如需启用则按照指示进入网站注册获取 token 填写即可开启。</p>\n<h1 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h1>\n<p>浏览器访问  <code>http://localhost:2430</code>  ，首次进入需要设置账号密码及路径：</p>\n<p><img data-src=\"modb_20220615_284dfee2-ec9b-11ec-a5f5-fa163eb4f6be.png\" alt=\"img\" /></p>\n<h2 id=\"语言及扫描\"><a class=\"anchor\" href=\"#语言及扫描\">#</a> 语言及扫描</h2>\n<p>登入进来后，在  <code>设置</code>  中可以配置您需要的语言；如果你的图片存放文件夹已经存放有相应的图片，那么首次显示需要扫描才出来：</p>\n<p><img data-src=\"image-20250617223249426.png\" alt=\"image-20250617223249426\" /></p>\n<h2 id=\"多用户管理\"><a class=\"anchor\" href=\"#多用户管理\">#</a> 多用户管理</h2>\n<p>同样是在  <code>设置</code>  中，在  <code>用户</code>  项里你可以管理多个用户，并指定权限，同样的每个用户上也支持多个相册路径，值得注意的是增加的主路径要确保在配置上是存在的，当然，你一可以单一主路径，但为其增设子文件夹：</p>\n<p><img data-src=\"image-20250617224027119.png\" alt=\"image-20250617224027119\" /></p>\n",
            "tags": [
                "docker"
            ]
        },
        {
            "id": "https://arachnid.cc/docker-deployment-of-webdav/",
            "url": "https://arachnid.cc/docker-deployment-of-webdav/",
            "title": "docker 部署之 webdav 文件服务",
            "date_published": "2024-12-01T07:28:53.000Z",
            "content_html": "<blockquote>\n<p>Version：<a href=\"https://github.com/hacdias/webdav/tree/v5.4.1\"><strong>webdav</strong></a> v5.4.1</p>\n</blockquote>\n<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<h2 id=\"nfs-协议\"><a class=\"anchor\" href=\"#nfs-协议\">#</a> NFS 协议</h2>\n<p>NFS（网络文件系统 Network File System）是 TCP/IP 协议集所提供的一种子协议，已然成为 Unix/Linux 类系统的标配。</p>\n<p><strong>优点</strong>：</p>\n<ul>\n<li>在 Unix/Linux 环境中性能优异。</li>\n<li>配置相对简单，集成在大部分类 Unix 系统中。</li>\n<li>支持不同的 NFS 版本，提供向后兼容性。</li>\n</ul>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>权限管理相对简单，对安全性要求高的场景需额外配置。</li>\n<li>通常依赖于底层网络的稳定性。</li>\n</ul>\n<p><strong>安全性</strong>：</p>\n<ul>\n<li>没有加密授权等功能，仅依靠 IP 地址或主机名来决定用户能否挂载共享目录，对具体目录和文件无法进行 ACL 权限控制（NFSv4 以前）。</li>\n</ul>\n<p><strong>常见用途</strong>：Unix/Linux 系统间的文件共享、分布式文件系统、HPC（高性能计算）环境。</p>\n<h2 id=\"samba-协议\"><a class=\"anchor\" href=\"#samba-协议\">#</a> Samba 协议</h2>\n<p>Samba 是 SMB/CIFS（Server Message Block / Common Internet File System）网络协议的重新实现，可以在局域网不同计算机之间进行文件、打印机等资源共享，和 NFS 功能类似。</p>\n<p><strong>优点</strong>：</p>\n<ul>\n<li>支持丰富的功能，包括文件和打印共享、用户身份验证和授权。</li>\n<li>广泛应用于 Windows 网络环境，集成度高。</li>\n<li>提供详细的权限设置和文件锁定机制，支持并发控制。</li>\n</ul>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>相对复杂，可能需要较多的配置和管理。</li>\n<li>在大规模网络中，性能可能受限。</li>\n</ul>\n<p><strong>安全性</strong>：</p>\n<ul>\n<li>提供端到端加密、安全性高，配置选项丰富，支持 ACL 并支持多种用户认证模式。</li>\n</ul>\n<p><strong>常见用途</strong>：局域网内的文件共享、打印服务、企业内部网络存储。</p>\n<h2 id=\"webdav-协议\"><a class=\"anchor\" href=\"#webdav-协议\">#</a> WebDAV 协议</h2>\n<p>WebDAV（Web-based Distributed Authoring and Versioning）是基于 HTTP1.1 协议的拓展升级版，可以很方便的跨越网关、防火墙。使得在公网上访问特别简单，并且通过 https 的公网访问拥有非常棒的安全性。</p>\n<p><strong>优点</strong>：</p>\n<ul>\n<li>基于 HTTP 协议，广泛兼容。</li>\n<li>提供文件锁定机制，支持多人协作。</li>\n<li>支持元数据（属性）的存储和管理。</li>\n</ul>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>性能相比专用文件系统协议稍差。</li>\n<li>安全性依赖于 HTTP 的基础设施（如 SSL/TLS）。</li>\n</ul>\n<p><strong>安全性</strong>：</p>\n<ul>\n<li>协议本身并没有提供加密功能，但可以通过使用 HTTPS 协议来保障数据传输的安全性；另外，支持身份验证和权限控制，可以设置访问权限，从而保障数据的安全性。</li>\n</ul>\n<p><strong>常见用途</strong>：远程文件编辑、网络存储解决方案（如云端存储）。</p>\n<p>因此，在了解了上面常规的文件服务挂载协议后，对于远程数据访问，这里就可以使用 webdav 文件服务，关于该服务的搭建可以使用：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hhY2RpYXMvd2ViZGF2\">https://github.com/hacdias/webdav</span></p>\n<h1 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h1>\n<p>建立存放路径及生成配置文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># $WEBDAV_PATH 为你 webdav 部署共享的路径</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /app/webdav /<span class=\"token operator\">&lt;</span><span class=\"token variable\">$WEBDAV_PATH</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /app/webdav</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">vim</span> config.yml</pre></td></tr></table></figure><p>添加配置：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"><span>config.yml</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">address</span><span class=\"token punctuation\">:</span> 0.0.0.0</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">8081</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># TLS-related settings if you want to enable TLS directly.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key atrule\">tls</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">cert</span><span class=\"token punctuation\">:</span> cert.pem</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> key.pem</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># Prefix to apply to the WebDAV path-ing. Default is '/'.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token key atrule\">prefix</span><span class=\"token punctuation\">:</span> /</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># Enable or disable debug logging. Default is 'false'.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token key atrule\">debug</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># Disable sniffing the files to detect their content type. Default is 'false'.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token key atrule\">noSniff</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># The directory that will be able to be accessed by the users when connecting.</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># This directory will be used by users unless they have their own 'directory' defined.</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># Default is '.' (current directory).</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token key atrule\">directory</span><span class=\"token punctuation\">:</span> .</pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># The default permissions for users. This is a case insensitive option. Possible</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># permissions: C (Create), R (Read), U (Update), D (Delete). You can combine multiple</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\"># permissions. For example, to allow to read and create, set \"RC\". Default is \"R\".</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token key atrule\">permissions</span><span class=\"token punctuation\">:</span> R</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\"># The default permissions rules for users. Default is none.</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># Logging configuration</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token key atrule\">log</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token comment\"># Logging format ('console', 'json'). Default is 'console'.</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token key atrule\">format</span><span class=\"token punctuation\">:</span> console</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token comment\"># Enable or disable colors. Default is 'true'. Only applied if format is 'console'.</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token key atrule\">colors</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token comment\"># Logging outputs. You can have more than one output. Default is only 'stderr'.</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token key atrule\">outputs</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">-</span> stderr</pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\"># CORS configuration</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token key atrule\">cors</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token comment\"># Whether or not CORS configuration should be applied. Default is 'false'.</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token key atrule\">credentials</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token key atrule\">allowed_headers</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token punctuation\">-</span> Depth</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token key atrule\">allowed_hosts</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">-</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8081</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token key atrule\">allowed_methods</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">-</span> GET</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token key atrule\">exposed_headers</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">-</span> Content<span class=\"token punctuation\">-</span>Length</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">-</span> Content<span class=\"token punctuation\">-</span>Range</pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\"># The list of users. If the list is empty, then there will be no authentication.</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token comment\"># Otherwise, basic authentication will automatically be configured.</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\"># If you're delegating the authentication to a different service, you can proxy</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token comment\"># the username using basic authentication, and then disable webdav's password</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\"># check using the option:</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\"># noPassword: true</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token key atrule\">users</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token comment\"># Example 'john' user with bcrypt encrypted password, with custom directory.</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> john</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"&#123;bcrypt&#125;$2y$10$zEP6oofmXFeHaeMfBNLnP.DO8m.H.Mwhd24/TOX2MWLxAExXi4qgi\"</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token key atrule\">directory</span><span class=\"token punctuation\">:</span> /data</pre></td></tr></table></figure><p>运行 Docker：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">docker</span> pull hacdias/webdav:latest</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">--name</span> webdav <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-v</span> /<span class=\"token operator\">&lt;</span><span class=\"token variable\">$WEBDAV_PATH</span><span class=\"token operator\">></span>/:/data <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-v</span> /app/webdav/config.yml:/webdav_config.yml:ro <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-p</span> <span class=\"token number\">6065</span>:8081 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">TZ</span><span class=\"token operator\">=</span>Asia/Shanghai <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">--restart</span> always <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"\"></td><td><pre>  ghcr.io/hacdias/webdav <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"11\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-c</span> /webdav_config.yml</pre></td></tr></table></figure><p>参数解释：</p>\n<ul>\n<li><code>-v /app/webdav/config.yml:/webdav_config.yml:ro</code>  ：将主机的  <code>config.yml</code>  配置文件映射为容器的  <code>/webdav_config.yml</code>  文件，用于启动参数的获取。</li>\n<li><code>-p 6065:8081</code>  ：将容器的 8081 端口映射到主机的 6065 端口，使得 webdav 的 Web 界面可以通过主机的端口访问。</li>\n<li><code>-c /webdav_config.yml</code>  ：通过传参命令，指定读取（容器内路径）启动参数配置。</li>\n</ul>\n<h1 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h1>\n<p>通过专用的 webdav 挂载工具，输入地址加端口，在登录的时候，根据  <code>webdav_config.yml</code>  中的  <code>users:</code>  字段，选择不同的用户登录，则链接到不同的挂载访问路径。</p>\n",
            "tags": [
                "docker"
            ]
        },
        {
            "id": "https://arachnid.cc/docker-deployment-of-gitea/",
            "url": "https://arachnid.cc/docker-deployment-of-gitea/",
            "title": "docker 部署之 gitea 代码管控",
            "date_published": "2024-12-01T07:25:21.000Z",
            "content_html": "<blockquote>\n<p>Version：<a href=\"https://github.com/go-gitea/gitea/tree/v1.22.4\"><strong>Gitea</strong></a> 1.22.4</p>\n</blockquote>\n<p><img data-src=\"image-20250621173610358.png\" alt=\"gitea login\" /></p>\n<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<p>作为开发人员，想必正在使用 GitHub 了吧，或者没用过也听说过它的大名；而对于自己的项目，难免避免不了代码管理，如果不想受限于 GitHub 的服务器网络或者想建立一个小团队的 Git 服务，因此能有一个与 GitHub 相仿的工具将大大提高处理效率；而 Gitea 正是这样的工具，它以轻量、极易、快速著称，能够高效而轻松的帮助团队和开发者。</p>\n<p>官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdpdGVhLmNvbS96aC1jbi8=\">https://docs.gitea.com/zh-cn/</span></p>\n<p><img data-src=\"image-20250621173424402.png\" alt=\"gitea\" /></p>\n<h1 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h1>\n<p>为你的 gitea 存放创建数据和配置文件夹：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># $PATH 为你存储盘的路径</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /<span class=\"token operator\">&lt;</span><span class=\"token environment constant\">$PATH</span><span class=\"token operator\">></span>/gitea/data</pre></td></tr></table></figure><p>运行 Docker：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">docker</span> pull gitea/gitea:latest</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">--name</span> gitea <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-v</span> /<span class=\"token operator\">&lt;</span><span class=\"token environment constant\">$PATH</span><span class=\"token operator\">></span>/gitea/data:/data <span class=\"token punctuation\">\\</span> <span class=\"token comment\"># 是 Gitea 标准容器的数据存储点，包含了 Git 仓库、SQLite 数据库文件、缓存文件等。</span></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-v</span> /etc/timezone:/etc/timezone:ro <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-v</span> /etc/localtime:/etc/localtime:ro <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-p</span> <span class=\"token number\">3000</span>:3000 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-p</span> <span class=\"token number\">2220</span>:22 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">TZ</span><span class=\"token operator\">=</span>Asia/Shanghai <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"11\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">--restart</span> always <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"12\"></td><td data-command=\"\"></td><td><pre>  gitea/gitea</pre></td></tr></table></figure><p>在这里，并没有指定 db 数据库，因此按照官方的说明，将使用 sqlite3 作为数据库校验存储；如需更改为其它数据库管理，可参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdpdGVhLmNvbS96aC1jbi9pbnN0YWxsYXRpb24vaW5zdGFsbC13aXRoLWRvY2tlcg==\">https://docs.gitea.com/zh-cn/installation/install-with-docker</span></p>\n<h1 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h1>\n<p>首次安装 Gitea 后，输入  <code>http://localhost:3000/</code>  访问初始化页面，按需设置服务器信息。第一个注册的用户账号为管理账号：</p>\n<p><img data-src=\"2956540-20220927193823094-433532346.png\" alt=\"image\" /></p>\n<p>剩下的功能，已与 GitHub 无异，这里就不一一阐述了。</p>\n",
            "tags": [
                "docker"
            ]
        },
        {
            "id": "https://arachnid.cc/docker-deployment-of-ddns/",
            "url": "https://arachnid.cc/docker-deployment-of-ddns/",
            "title": "docker 部署之 ddns-go 域名解析",
            "date_published": "2024-12-01T07:04:11.000Z",
            "content_html": "<blockquote>\n<p>在使用该项目之前，你必须至少拥有一个可支配的域名，否则下文对您来说仅是一篇不同文章，而非操作笔记。</p>\n</blockquote>\n<blockquote>\n<p>Version：<a href=\"https://github.com/jeessy2/ddns-go/tree/v6.7.6\"><strong>DDNS-GO</strong></a> v6.7.6</p>\n</blockquote>\n<p><img data-src=\"image-20250621174156820.png\" alt=\"ddns-go login\" /></p>\n<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<p>ddns-go 是一个简易便捷的自动更新域名解析的工具，支持多平台、多架构、多服务商、多域名。</p>\n<h2 id=\"特性\"><a class=\"anchor\" href=\"#特性\">#</a> 特性</h2>\n<ul>\n<li>支持 Mac、Windows、Linux 系统，支持 ARM、x86 架构</li>\n<li>支持的域名服务商  <code>阿里云</code>   <code>腾讯云</code>   <code>Dnspod</code>   <code>Cloudflare</code>   <code>华为云</code>   <code>Callback</code>   <code>百度云</code>   <code>Porkbun</code>   <code>GoDaddy</code>   <code>Namecheap</code>   <code>NameSilo</code>   <code>Dynadot</code>   <code>DNSLA</code></li>\n<li>支持接口 / 网卡 /<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2plZXNzeTIvZGRucy1nby93aWtpLyVFOSU4MCU5QSVFOCVCRiU4NyVFNSU5MSVCRCVFNCVCQiVBNCVFOCU4RSVCNyVFNSU4RiU5NklQJUU1JThGJTgyJUU4JTgwJTgz\"> 命令</span>获取 IP</li>\n<li>支持以服务的方式运行</li>\n<li>默认间隔 5 分钟同步一次</li>\n<li>支持同时配置多个 DNS 服务商</li>\n<li>支持多个域名同时解析</li>\n<li>支持多级域名</li>\n<li>网页中配置，简单又方便，默认勾选 <code>禁止从公网访问</code></li>\n<li>网页中方便快速查看最近 50 条日志</li>\n<li>支持 Webhook 通知</li>\n<li>支持 TTL</li>\n<li>支持部分 DNS 服务商<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2plZXNzeTIvZGRucy1nby93aWtpLyVFNCVCQyVBMCVFOSU4MCU5MiVFOCU4NyVBQSVFNSVBRSU5QSVFNCVCOSU4OSVFNSU4RiU4MiVFNiU5NSVCMA==\">传递自定义参数</span>，实现地域解析 / 多 IP 等功能</li>\n</ul>\n<p>关于它的更多介绍及使用，可以参看该工程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2plZXNzeTIvZGRucy1nbw==\">https://github.com/jeessy2/ddns-go</span></p>\n<p><img data-src=\"image-20250621174255920.png\" alt=\"ddns-go\" /></p>\n<h1 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h1>\n<p>建立存放路径：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /app/ddns-go</pre></td></tr></table></figure><p>运行 Docker：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">docker</span> pull jeessy/ddns-go:latest</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">--name</span> ddns-go <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">--net</span><span class=\"token operator\">=</span>host <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-v</span> /app/ddns-go:/root <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">TZ</span><span class=\"token operator\">=</span>Asia/Shanghai <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">--restart</span> always <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"\"></td><td><pre>  jeessy/ddns-go <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-l</span> :9877 <span class=\"token parameter variable\">-f</span> <span class=\"token number\">600</span></pre></td></tr></table></figure><p>参数解释：</p>\n<ul>\n<li><code>--net=host</code>  ：使用 docker host 模式</li>\n<li><code>-l</code>  ：通过传参命令，指定监听地址</li>\n<li><code>-f</code>  ：通过传参命令，同步间隔时间 (秒)</li>\n</ul>\n<h1 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h1>\n<p>通过访问  <code>http://localhost:9877</code>  ，初次进入登录并配置管理账号：</p>\n<p><img data-src=\"image-20250614140959073.png\" alt=\"image-20250614140959073\" /></p>\n<p>登录进来后，选择你对应的域名服务器厂商并进行相应配置，不同的服务商，具体获取的 API Token 也不一样，因此这里就不多做解释了：</p>\n<p><img data-src=\"image-20250614142020388.png\" alt=\"image-20250614142020388\" /></p>\n<h2 id=\"ipv4\"><a class=\"anchor\" href=\"#ipv4\">#</a> ipv4</h2>\n<p>ipv4 目前还是主流的 IP 使用方式，因此可以直接使用网卡获取的方式进行：</p>\n<p><img data-src=\"image-20250614142459126.png\" alt=\"image-20250614142459126\" /></p>\n<p>当然，对于 ipv4 来说，并非每个人都能获取到公网 ipv4，如若没有公网 ipv4，那么则建议你停掉 ipv4 的启用更新。</p>\n<h2 id=\"ipv6\"><a class=\"anchor\" href=\"#ipv6\">#</a> ipv6</h2>\n<p><strong>通过网卡获取：</strong></p>\n<p>需要使用 docker host 模式，如果不能从网卡获取 240 开头的外网 ipv6 地址，那么将会显示 “没有找到可用的网卡” 不可选。</p>\n<p><strong>通过命令获取：</strong></p>\n<p><img data-src=\"image-20250614142930782.png\" alt=\"image-20250614142930782\" /></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ip</span> <span class=\"token parameter variable\">-6</span> addr show eth0 <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> deprecated <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">'inet6 [^f:]'</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> -F<span class=\"token string\">' '</span> <span class=\"token string\">'&#123;print $2&#125;'</span> <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> -F<span class=\"token string\">'/'</span> <span class=\"token string\">'&#123;print $1&#125;'</span> <span class=\"token operator\">|</span> <span class=\"token function\">tail</span> <span class=\"token parameter variable\">-1</span></pre></td></tr></table></figure><p>然后是步骤拆解：</p>\n<ol>\n<li><code>ip -6 addr show eth0</code> ，显示网卡（eth0）的全部 ipv6 地址</li>\n<li><code>grep -v deprecated</code> ，去除已经失效（deprecated）的地址</li>\n<li><code>grep 'inet6 [^f:]'</code> ，显示有 ipv6 地址的那一行（不包含 f 开头的内网 ipv6 地址）</li>\n<li><code>awk -F' ' '&#123;print $2&#125;'</code> ，根据空格符号分列，打印第二列</li>\n<li><code>awk -F'/' '&#123;print $1&#125;'</code> ，根据斜杠符号 / 分列，打印第一列</li>\n<li><code>tail -1</code> ，显示最后一行</li>\n</ol>\n<p>参看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ydW9oYWkud2FuZy8yMDI0MDQvZGRucy1nby11c2Utc2hlbGwtY29tbWFuZC10by1nZXQtdmFsaWQtaXB2Ni1hZGRyLw==\">DDNS-GO 通过命令获取有效的 IPv6 地址</span></p>\n<h2 id=\"重置密码\"><a class=\"anchor\" href=\"#重置密码\">#</a> 重置密码</h2>\n<p>由于 ddns-go 设置密码必须使用复杂密码，因此如果忘记忘记，可以使用以下命令重置：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> ddns-go ./ddns-go <span class=\"token parameter variable\">-resetPassword</span> <span class=\"token number\">123456</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">docker</span> restart ddns-go</pre></td></tr></table></figure><p>或者进入容器的控制终端后台：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> ddns-go /bin/sh</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"/app #\"></td><td><pre><span class=\"token function\">ls</span> <span class=\"token parameter variable\">-al</span> /root/</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre>total <span class=\"token number\">16</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre>drwxr-xr-x    <span class=\"token number\">2</span> root     root          <span class=\"token number\">4096</span> Dec  <span class=\"token number\">1</span> <span class=\"token number\">15</span>:50 <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre>drwxr-xr-x    <span class=\"token number\">1</span> root     root          <span class=\"token number\">4096</span> Dec  <span class=\"token number\">1</span> <span class=\"token number\">15</span>:04 <span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"\"></td><td><pre>-rw-------    <span class=\"token number\">1</span> root     root           <span class=\"token number\">180</span> Dec  <span class=\"token number\">1</span> <span class=\"token number\">16</span>:13 .ash_history</pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre>-rw-------    <span class=\"token number\">1</span> root     root           <span class=\"token number\">958</span> Dec  <span class=\"token number\">1</span> <span class=\"token number\">16</span>:28 .ddns_go_config.yaml</pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"/app #\"></td><td><pre><span class=\"token function\">vi</span> /root/.ddns_go_config.yaml</pre></td></tr></table></figure><p>通过编辑  <code>/root/.ddns_go_config.yaml</code>  文件更改账号密码。</p>\n",
            "tags": [
                "docker"
            ]
        },
        {
            "id": "https://arachnid.cc/docker-deployment-of-gitea/",
            "url": "https://arachnid.cc/docker-deployment-of-gitea/",
            "title": "docker 部署之 calibre-web 图书馆藏",
            "date_published": "2024-06-30T17:21:45.000Z",
            "content_html": "<blockquote>\n<p>Version：<a href=\"https://github.com/janeczku/calibre-web/tree/0.6.23\"><strong>Calibre Web</strong></a> 0.6.23</p>\n</blockquote>\n<p><img data-src=\"image-20250621174057431.png\" alt=\"calibre-web login\" /></p>\n<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<p>calibre-web 是基于著名开源电子书管理工具 calibre 的 calibre-server 内容服务器提供的接口，开发了 calibre 的 Web 端 calibre-web，并提供了 Docker 安装包，使得 calibre 和 calibre-web 实现本地图书管理和在线访问。</p>\n<p>项目：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2phbmVjemt1L2NhbGlicmUtd2Vi\">https://github.com/janeczku/calibre-web</span></p>\n<p><img data-src=\"image-20250621174024378.png\" alt=\"calibre-web\" /></p>\n<h1 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h1>\n<p>为你的 calibre-web 存放创建数据和配置文件夹：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># $PATH 为你存储盘的路径</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /<span class=\"token operator\">&lt;</span><span class=\"token environment constant\">$PATH</span><span class=\"token operator\">></span>/calibre/config /<span class=\"token operator\">&lt;</span><span class=\"token environment constant\">$PATH</span><span class=\"token operator\">></span>/calibre/book</pre></td></tr></table></figure><p>运行 Docker：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">docker</span> pull ghcr.io/gshang2017/calibre-web:latest</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>calibre-web <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">PUID</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">PGID</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">TZ</span><span class=\"token operator\">=</span>Asia/Shanghai <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">DOCKER_MODS</span><span class=\"token operator\">=</span>linuxserver/calibre-web:calibre <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8083</span>:8083 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-v</span> /<span class=\"token operator\">&lt;</span><span class=\"token environment constant\">$PATH</span><span class=\"token operator\">></span>/calibre/config:/config <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"11\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-v</span> /<span class=\"token operator\">&lt;</span><span class=\"token environment constant\">$PATH</span><span class=\"token operator\">></span>/calibre/library:/books <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"12\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">--restart</span> always <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"13\"></td><td data-command=\"\"></td><td><pre>  ghcr.io/gshang2017/calibre-web</pre></td></tr></table></figure><h1 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h1>\n<p>浏览器访问  <code>http://localhost:8083</code>  ，这时候默认使用英文，登录界面默认账号  <code>admin</code> ，密码  <code>admin123</code>  ：</p>\n<p><img data-src=\"image-20250615230359751.png\" alt=\"image-20250615230359751\" /></p>\n<h2 id=\"数据库管理\"><a class=\"anchor\" href=\"#数据库管理\">#</a> 数据库管理</h2>\n<p>登入后会看到 Database Configuration 提示，要求指定 calibre 数据库路径：</p>\n<p><img data-src=\"16971183045685.jpg\" alt=\"calibre-web\" /></p>\n<p>实际上就是要找  <code>metadata.db</code>  所在的位置，而在此步骤正确设置完成之前，其他任何操作均无法进行。</p>\n<p>那么  <code>metadata.db</code>  所在何处？  <code>metadata.db</code>  是一个 calibre 客户端上的数据库，因此在 calibre-web 中并不存在，所以要么在电脑上安装了 calibre 的 PC 客户端上，在安装目录中找到  <code>metadata.db</code>  文件；要么就从 calibre-web 项目中下载一个默认的 <a href=\"https://github.com/janeczku/calibre-web/raw/master/library/metadata.db\"> <code>metadata.db</code> </a> 文件；当然，最好还是选择第二种获取空白模板的比较好。</p>\n<h2 id=\"密码修改及语言配置\"><a class=\"anchor\" href=\"#密码修改及语言配置\">#</a> 密码修改及语言配置</h2>\n<p>点击页面右上角  <code>admin</code> ，在  <code>Password</code>  中填入新的密码，然后点击  <code>Language</code>  选择你需要的语言，然后点击  <code>Save</code>  ：</p>\n<p><img data-src=\"image-20250616200451371.png\" alt=\"image-20250616200451371\" /></p>\n<h2 id=\"上传功能\"><a class=\"anchor\" href=\"#上传功能\">#</a> 上传功能</h2>\n<p>点击页面右上角  <code>管理权限</code>  -&gt;  <code>编辑基本配置</code>  -&gt;  <code>功能配置</code>  -&gt;  <code>启用上传</code>  -&gt;  <code>保存</code>  ：</p>\n<p><img data-src=\"image-20250616201224175.png\" alt=\"image-20250616201224175\" /></p>\n<p>上面是开启整个上传功能，并且根据提示还需要确认用户上的上传功能，因此在  <code>管理权限</code>  -&gt;  <code>管理用户</code>  中配置确认，为你所需的账号开启上传：</p>\n<p><img data-src=\"image-20250616201525076.png\" alt=\"image-20250616201525076\" /></p>\n<h2 id=\"格式转换功能\"><a class=\"anchor\" href=\"#格式转换功能\">#</a> 格式转换功能</h2>\n<p>点击页面右上角  <code>管理权限</code>  -&gt;  <code>编辑基本配置</code>  -&gt;  <code>扩展程序配置</code>  ，进行以下修改后点击  <code>保存</code>  ：</p>\n<p>Calibre 电子书转换器路径： <code>/usr/bin/</code></p>\n<p>KEpubify 电子书转换器路径： <code>/usr/local/bin/kepubify</code></p>\n<p><img data-src=\"image-20250616203834590.png\" alt=\"image-20250616203834590\" /></p>\n<p>这个配置是官方给的固定写法，所以不做解释，有兴趣的请翻阅官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWdpc3RyeS5odWIuZG9ja2VyLmNvbS9yL2xpbnV4c2VydmVyL2NhbGlicmUtd2ViLw==\">https://registry.hub.docker.com/r/linuxserver/calibre-web/</span></p>\n<h1 id=\"安可\"><a class=\"anchor\" href=\"#安可\">#</a> 安可</h1>\n<p>关于 App 客户端，这里使用 “<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2dlZG9vci9sZWdhZG8=\">阅读</span>” App：</p>\n<p><img data-src=\"image-20250616225105928.png\" alt=\"image-20250616225105928\" /></p>\n<p>主要功能：</p>\n<ol>\n<li>自定义书源，自己设置规则，抓取网页数据，规则简单易懂，软件内有规则说明。</li>\n<li>列表书架，网格书架自由切换。</li>\n<li>书源规则支持搜索及发现，所有找书看书功能全部自定义，找书更方便。</li>\n<li>订阅内容，可以订阅想看的任何内容，看你想看</li>\n<li>支持替换净化，去除广告替换内容很方便。</li>\n<li>支持本地 TXT、EPUB 阅读，手动浏览，智能扫描。</li>\n<li>支持高度自定义阅读界面，切换字体、颜色、背景、行距、段距、加粗、简繁转换等。</li>\n<li>支持多种翻页模式，覆盖、仿真、滑动、滚动等。</li>\n<li>软件开源，持续优化，无广告。</li>\n</ol>\n<p>然后搭配 webdav 服务，即可链接下载 calibre-web 服务端上面的书籍了。关于如何搭建 webdav 服务，可以参看：<a href=\"https://arachnid.cc/docker-deployment-of-webdav/\">docker 部署之 webdav 文件服务</a> 。</p>\n",
            "tags": [
                "docker"
            ]
        },
        {
            "id": "https://arachnid.cc/docker-deployment-of-portainer/",
            "url": "https://arachnid.cc/docker-deployment-of-portainer/",
            "title": "docker 部署之 portainer 管理面板",
            "date_published": "2024-06-15T12:32:02.000Z",
            "content_html": "<blockquote>\n<p>如果你喜欢敲命令来操作 Docker，那么这点你可以跳过了，否则可以安装 portainer 对 Docker 进行页面管理。</p>\n</blockquote>\n<blockquote>\n<p>Version：<a href=\"https://github.com/eysp/portainer-ce/tree/2.19.5\"><strong>portainer-ce</strong></a> 社区版 2.19.5</p>\n</blockquote>\n<p><img data-src=\"image-20250621173729084.png\" alt=\"portainer login\" /></p>\n<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<p>portainer 管理面板是一个简洁的 dockers 容器可视化操作界面，它把常规的命令操作搬到了显示面板上，提供状态显示面板、应用模板快速部署、容器镜像网络数据卷的基本操作（包括上传下载镜像，创建容器等操作）、事件日志显示、容器控制台操作、Swarm 集群和服务等集中管理和操作、登录用户管理和控制等功能。</p>\n<p>具体介绍可以参看官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucG9ydGFpbmVyLmlvLw==\">Kubernetes and Docker Container Management Software</span></p>\n<p><img data-src=\"image-20250621173226937.png\" alt=\"portainer\" /></p>\n<h1 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h1>\n<p>运行 Docker：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 拉取汉化版镜像</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">docker</span> pull <span class=\"token number\">6053537</span>/portainer-ce:latest</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre><span class=\"token comment\"># 启动容器</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"[root@localhost] #\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">--name</span> portainer <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-p</span> <span class=\"token number\">9000</span>:9000 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-v</span> /var/run/docker.sock:/var/run/docker.sock <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-v</span> /app/portainer_data:/data <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">TZ</span><span class=\"token operator\">=</span>Asia/Shanghai <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"11\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">--privileged</span><span class=\"token operator\">=</span>true <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"12\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token parameter variable\">--restart</span> always <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"13\"></td><td data-command=\"\"></td><td><pre>  <span class=\"token number\">6053537</span>/portainer-ce</pre></td></tr></table></figure><p>参数解释：</p>\n<ul>\n<li><code>-d</code>  ：以后台模式运行容器。</li>\n<li><code>--name portainer</code>  ：设置容器的名称为  <code>portainer</code> 。</li>\n<li><code>-p 9000:9000</code>  ：将容器的 9000 端口映射到主机的 9000 端口，使得 portainer 的 Web 界面可以通过主机的端口访问。</li>\n<li><code>-v /var/run/docker.sock:/var/run/docker.sock</code>  和  <code>-v /app/portainer_data:/data</code>  ：将主机  <code>/var/run/</code>  目录下的  <code>docker.sock</code>  和  <code>/app/portainer_data</code>  目录下的  <code>portainer_data</code>  分别映射进容器的  <code>/var/run/docker.sock</code>  和  <code>/data</code>  路径。</li>\n<li><code>--restart always</code>  ：确保容器在退出时自动重启。</li>\n<li><code>6053537/portainer-ce</code> ：指定使用的 Docker 镜像。</li>\n</ul>\n<p>note：在  <code>docker run</code>  执行后面加入  <code>--restart=always</code>  可以使开机后会自动启动面板，否则还要自己手动设备启动。</p>\n<p>最后通过访问  <code>http://localhost:9000</code>  来访问 portainer 的 Web 界面。</p>\n<h1 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h1>\n<p>初次访问 portainer 的 Web 界面，会提示你建立一个 admin 的管理账号：</p>\n<p><img data-src=\"994129-20230409002217893-356786116.png\" alt=\"\" /></p>\n<p>并根据向导初始创建环境，这里选择本地环境：</p>\n<p><img data-src=\"cd8b52c8bcb1da00995d18d485af4e02.png\" alt=\"\" /></p>\n<p>完成后你就可以管理你的所有 Docker 容器了：</p>\n<p><img data-src=\"image-20250614120131550.png\" alt=\"image-20250614120131550\" /></p>\n<h1 id=\"安可\"><a class=\"anchor\" href=\"#安可\">#</a> 安可</h1>\n<p>关于 App 客户端，可以使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xvbGxpcG9wa2l0L2ZsdXR0ZXJfc2VydmVyX2JveA==\">ServerBox</span> 服务器工具箱：</p>\n<ul>\n<li>状态图表（CPU、传感器、GPU 等）, SSH 终端，SFTP, Docker &amp; 进程 &amp; Systemd 管理，S.M.A.R.T ...</li>\n<li>特殊支持：生物认证、推送、桌面小部件、watchOS App、跟随系统颜色 ...</li>\n</ul>\n<p>图示：</p>\n<p><img data-src=\"Screenshot_20250814_204352_ServerBox.jpg\" alt=\"Screenshot_20250814_204352_ServerBox\" /></p>\n<p><img data-src=\"Screenshot_20250814_204705_ServerBox.jpg\" alt=\"Screenshot_20250814_204705_ServerBox\" /></p>\n<p><img data-src=\"Screenshot_20250814_204526_ServerBox.jpg\" alt=\"Screenshot_20250814_204526_ServerBox\" /></p>\n",
            "tags": [
                "docker"
            ]
        }
    ]
}