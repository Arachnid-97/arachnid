<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>命运转轮 • Posts by &#34;gcc&#34; tag</title>
        <link>https://arachnid.cc</link>
        <description>不曾亏欠, 不曾辜负, 如此足矣</description>
        <language>zh-CN</language>
        <pubDate>Sun, 07 Jul 2024 20:45:26 +0800</pubDate>
        <lastBuildDate>Sun, 07 Jul 2024 20:45:26 +0800</lastBuildDate>
        <category>EDA</category>
        <category>history</category>
        <category>电子</category>
        <category>硬件设计</category>
        <category>C</category>
        <category>MCU</category>
        <category>Ubuntu</category>
        <category>git</category>
        <category>工具</category>
        <category>hexo</category>
        <category>gcc</category>
        <category>IDE</category>
        <category>SQL</category>
        <category>JSON</category>
        <category>Linux</category>
        <category>linux_c</category>
        <category>arm_linux</category>
        <category>imx6ull</category>
        <category>docker</category>
        <category>nas</category>
        <category>RTOS</category>
        <category>FreeRTOS</category>
        <category>算法</category>
        <category>DMX512</category>
        <category>modbus</category>
        <category>Modem</category>
        <item>
            <guid isPermalink="true">https://arachnid.cc/gcc-compiler-summary/</guid>
            <title>GCC 应用总结</title>
            <link>https://arachnid.cc/gcc-compiler-summary/</link>
            <category>gcc</category>
            <pubDate>Sun, 07 Jul 2024 20:45:26 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;关键字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关键字&#34;&gt;#&lt;/a&gt; 关键字&lt;/h1&gt;
&lt;h2 id=&#34;weak-关键字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#weak-关键字&#34;&gt;#&lt;/a&gt; weak 关键字&lt;/h2&gt;
&lt;p&gt;一般用法： &lt;code&gt;__attribute__((weak))&lt;/code&gt;  ，用于定义或声明对应的函数是一个 weak 属性。&lt;/p&gt;
&lt;p&gt;在 Linux 开发环境中，有强符号和弱符号，符号简单来说就是函数、变量的名字，对于全局（非局部、非 &lt;code&gt;static&lt;/code&gt; ）的函数和变量，能不能重名是有一定规矩的，强、弱符号就是针对这些全局函数和变量来说的。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;符号类型&lt;/th&gt;
&lt;th&gt;对象&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;强&lt;/td&gt;
&lt;td&gt;函数名，赋初值的全局变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;弱&lt;/td&gt;
&lt;td&gt;未初始化的全局变量&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;当代码中同时存在多个强或弱的全局变量时，要遵守如下规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;强符号只能定义一次，否则编译错误；&lt;/li&gt;
&lt;li&gt;强弱符号同时存在，以强符号为准；&lt;/li&gt;
&lt;li&gt;没有强符号，则从多个弱符号中任选一个，用  &lt;code&gt;–fno-common&lt;/code&gt;  编译选项可以在这种情况下输出 warning 提示。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;constructor-和-destructor-关键字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#constructor-和-destructor-关键字&#34;&gt;#&lt;/a&gt; constructor 和 destructor 关键字&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;__attribute__((constructor))&lt;/code&gt;  与  &lt;code&gt;__attribute__((destructor))&lt;/code&gt;  的用法。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__attribute__((constructor))&lt;/code&gt;  与  &lt;code&gt;__attribute__((destructor))&lt;/code&gt;  是 GCC 中用来修饰函数的，constructor 可以使被修饰的函数在 main () 执行前被调用，destructor 可以使被修饰的函数在 main () 执行结束或 exit () 调用结束后被执行。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;__attribute__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;constructor&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;constructor_func&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// ...&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;__attribute__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;destructor&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;destructor_func&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// ...&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;一个程序中可以存在多个 constructor 和 destructor，使用优先级区分执行顺序，数字越小表示优先级越高（100 以内的优先级为保留数字不能设置）。constructor 中优先级越高越靠前执行，destructor 中优先级越高越靠后执行。不加优先级参数相当于最低优先级。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;__attribute__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;priority&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;constructor_func&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// ...&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;__attribute__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;destructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;priority&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;destructor_func&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// ...&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;unused-关键字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#unused-关键字&#34;&gt;#&lt;/a&gt; unused 关键字&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;__attribute__((used))&lt;/code&gt; ，表示对于这个函数可能不会调用它、可能用不到它，编译器不用进行 warning 提示。&lt;br /&gt;
而在嵌入式中 中断函数都是由内部的中断处理机制通过中断向量做跳转调用的，不是开发人员 “显式” 去调用的，因此在一些规则检查比较严格的编译器上编译时，就会出现类似于上面的警告，为了视野干净我们就添加这个属性。&lt;/p&gt;
&lt;h1 id=&#34;option&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#option&#34;&gt;#&lt;/a&gt; option&lt;/h1&gt;
&lt;h2 id=&#34;nanospecs-选项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nanospecs-选项&#34;&gt;#&lt;/a&gt; nano.specs 选项&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;nano.specs&lt;/code&gt;  是一个特殊的 specs 文件，它是为了在资源受限的环境中使用而优化的，比如在嵌入式系统或微控制器中。当你使用  &lt;code&gt;--specs=nano.specs&lt;/code&gt;  选项时，编译器会使用 “nano” 版本的 C 库，而这个版本的库被设计为比标准的 GNU C 库 (glibc) 更小，占用更少的 ROM 和 RAM。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主要特点&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;体积小&lt;/strong&gt;：nano 版本的库被优化以减小体积，适合那些对存储空间有严格限制的系统。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源使用低&lt;/strong&gt;：这些库在设计时考虑到了内存使用，以尽可能减少动态内存分配。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;功能减少&lt;/strong&gt;：为了减小体积，某些不常用的功能可能被移除或替换为更简单的实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在  &lt;code&gt;Makefile&lt;/code&gt;  上加上 option ：&lt;/p&gt;
&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;figcaption data-lang=&#34;makefile&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;CLIBS &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; -specs&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;nano.specs&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;-wrap-选项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-wrap-选项&#34;&gt;#&lt;/a&gt; -wrap 选项&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;-wrap&lt;/code&gt;  选项可以使 GCC 在编译链接的时候，转而调用  &lt;code&gt;__wrap_symbol&lt;/code&gt;  的定义，另外还有一个相关函数  &lt;code&gt;__real_symbol&lt;/code&gt; ，对于只声明不定义的 symbol，会对其调用到真正的 symbol 符号。&lt;/p&gt;
&lt;p&gt;以下是 GCC linker option  &lt;code&gt;–wrap&lt;/code&gt;  的描述：&lt;/p&gt;
&lt;figure class=&#34;highlight text&#34;&gt;&lt;figcaption data-lang=&#34;text&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Use a wrapper function for symbol. Any undefined reference to symbol will be resolved to&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;__wrap_symbol. Any undefined reference to __real_symbol will be resolved to symbol. This &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;can be used to provide a wrapper for a system function. The wrapper function should be &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;called __wrap_symbol. If it wishes to call the system function, it should call __real_symbol.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Here is a trivial example:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;void *&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;__wrap_malloc (int c)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#123;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    printf (&#34;malloc called with %ld\n&#34;, c);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    return __real_malloc (c);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;#125;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;If you link other code with this file using --wrap malloc, then all calls to malloc will&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;call the function __wrap_malloc instead. The call to __real_malloc in __wrap_malloc will&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;call the real malloc function. You may wish to provide a __real_malloc function as well, &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;so that links without the --wrap option will succeed. If you do this, you should not put &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;the definition of __real_malloc in the same file as __wrap_malloc; if you do, the assembler &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;may resolve the call before the linker has a chance to wrap it to malloc.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;像一般对 malloc、free、printf 进行调换：&lt;/p&gt;
&lt;p&gt;在  &lt;code&gt;Makefile&lt;/code&gt;  上加上 option ：&lt;/p&gt;
&lt;figure class=&#34;highlight makefile&#34;&gt;&lt;figcaption data-lang=&#34;makefile&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;WRAP &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; -Wl,-wrap,malloc -Wl,-wrap,free&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;WRAP &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; -Wl,-wrap,printf&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在函数里：&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;__attribute__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;weak&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;__wrap_malloc&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;size_t&lt;/span&gt; sz&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;__wrap_malloc: size = %d\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; sz&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;pvPortMalloc&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sz&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;__attribute__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;weak&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;__wrap_free&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;ptr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;__wrap_free: addr = %p\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; ptr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;vPortFree&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ptr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;__real_printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;format&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;__wrap_printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;format&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;__real_printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;format&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;上面实现了对  &lt;code&gt;malloc&lt;/code&gt;  的引用转换成调用  &lt;code&gt;__wrap_malloc&lt;/code&gt;  函数了，同样的  &lt;code&gt;__wrap_free&lt;/code&gt;  和  &lt;code&gt;__wrap_printf&lt;/code&gt;  也一样；但是有区别的是， &lt;code&gt;__wrap_printf&lt;/code&gt;  里面调用了  &lt;code&gt;__real_printf&lt;/code&gt; ，因此，可以理解对  &lt;code&gt;printf&lt;/code&gt;  的引用其实是不变的；而由于  &lt;code&gt;__wrap_malloc&lt;/code&gt;  和  &lt;code&gt;__wrap_free&lt;/code&gt;  分别实现打印和调用  &lt;code&gt;pvPortMalloc&lt;/code&gt;  及  &lt;code&gt;vPortFree&lt;/code&gt;  新的接口，所以在对  &lt;code&gt;malloc&lt;/code&gt;  和  &lt;code&gt;free&lt;/code&gt;  引用的时候，是有打印输出并转而执行新的函数接口。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;note：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在针对所有 “undefined reference to symbol” 中引用 symbol 的源文件里面不能有 symbol 的定义，否则汇编器在处理源文件的时候就会解析这个 symbol，链接器也就没有机会 wrap 这个 symbol 了；嘛简单点说就是需要 wrap 的函数不要跟原函数同时定义在一个源文件。&lt;/p&gt;
&lt;h2 id=&#34;-wunused-选项&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#-wunused-选项&#34;&gt;#&lt;/a&gt; -Wunused 选项&lt;/h2&gt;
&lt;p&gt;在 GCC 中，如果你想要检查程序中未使用的变量，函数或标签，可以使用以下编译参数：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-Wunused-variable&lt;/code&gt;  ：此选项会让 GCC 发出警告，如果你的代码中定义了一个变量，但从未使用过它。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-Wunused-function&lt;/code&gt;  ：此选项会让 GCC 发出警告，如果你的代码中定义了一个静态函数，但从未使用过它。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-Wunused-label&lt;/code&gt; ：此选项会让 GCC 发出警告，如果你的代码中定义了一个标签，但从未使用过它。&lt;/p&gt;
&lt;p&gt;你也可以使用  &lt;code&gt;-Wunused&lt;/code&gt;  参数来启用所有未使用相关的警告，这相当于  &lt;code&gt;-Wunused-variable -Wunused-function -Wunused-label&lt;/code&gt;  。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;note：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果说  &lt;code&gt;unused&lt;/code&gt;  关键字是作用于指定的函数，那么  &lt;code&gt;-Wunused&lt;/code&gt;  的这些选项就是作用于整个编译范围。&lt;/p&gt;
&lt;h1 id=&#34;预处理命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#预处理命令&#34;&gt;#&lt;/a&gt; 预处理命令&lt;/h1&gt;
&lt;h2 id=&#34;error&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#error&#34;&gt;#&lt;/a&gt; #error&lt;/h2&gt;
&lt;p&gt;在编译遇到  &lt;code&gt;#error&lt;/code&gt;  指令时，它会停止编译过程，并显示一个错误消息，同时包含该指令的文件名和行号；这通常用于当编译器检查到不满足特定条件时，强制编译失败。&lt;/p&gt;
&lt;h2 id=&#34;warning&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#warning&#34;&gt;#&lt;/a&gt; #warning&lt;/h2&gt;
&lt;p&gt;在编译遇到  &lt;code&gt;#warning&lt;/code&gt;  指令时，它会继续编译，但会在编译输出中显示一个警告消息，同时包含该指令的文件名和行号。&lt;/p&gt;
&lt;h1 id=&#34;预定义宏&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#预定义宏&#34;&gt;#&lt;/a&gt; 预定义宏&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;__LINE__&lt;/code&gt;  和  &lt;code&gt;__FILE__&lt;/code&gt;  分别用来显示当前的行号和文件名。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://arachnid.cc/gcc-compiler-collection/</guid>
            <title>GCC 编译器套件说明</title>
            <link>https://arachnid.cc/gcc-compiler-collection/</link>
            <category>gcc</category>
            <pubDate>Fri, 10 Feb 2023 23:28:36 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;gcc-简述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gcc-简述&#34;&gt;#&lt;/a&gt; GCC 简述&lt;/h1&gt;
&lt;p&gt;The GNU Compiler Collection，通常简称 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9nY2MuZ251Lm9yZy8=&#34;&gt;GCC&lt;/span&gt; ，是一套由 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZ251Lm9yZy8=&#34;&gt;GNU&lt;/span&gt; 开发的编译器集合。&lt;/p&gt;
&lt;p&gt;为什么是编辑器集合而不是编译器呢？&lt;/p&gt;
&lt;p&gt;那是因为 GNU 编译器集合包括 C、C++、Objective-C，Fortran，Ada、Go 和 D 等，以及这些语言的库 （libstdc++,...）。 GCC 最初是作为 GNU 操作系统的编译器编写的。 GNU 系统被开发为 100% 的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZ251Lm9yZy9waGlsb3NvcGh5L2ZyZWUtc3cuaHRtbA==&#34;&gt;自由软件&lt;/span&gt; ，即从某种意义上说它是自由的，尊重用户的自由。另外 GCC 对硬件平台的支持，可以说无所不在，它不仅支持 x86 处理器架构，还支持 ARM, Motorola 68000, Motorola 8800，AtmelAVR，MIPS 等处理器架构。&lt;/p&gt;
&lt;h1 id=&#34;gcc-主要构成&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gcc-主要构成&#34;&gt;#&lt;/a&gt; GCC 主要构成&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;gcc-core：顾明之意是 GCC 的核心部分，这部分是只包含 c 的编译器及公共部分，而对其他语言（C++、Ada 等）的支持包需要另外安装，这也是 GCC 为何如此强大的重要原因 。gcc-core 依赖于 Binutils。&lt;/li&gt;
&lt;li&gt;Binutils：它是一组开发工具，包括连接器，汇编器和其他用于目标文件和档案的工具。关于 Binutils 的介绍可以参考官方的 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZ251Lm9yZy9zb2Z0d2FyZS9iaW51dGlscy8=&#34;&gt;Binutils&lt;/span&gt; 介绍。这个软件包依赖于不同的目标机平台，因为不同目标机的指令集是不一样的，比如 arm 跟 x86 就不一样。&lt;br /&gt;
常用的工具有：
&lt;ul&gt;
&lt;li&gt;as：汇编器，把汇编语言代码转换为机器码（目标文件）。&lt;/li&gt;
&lt;li&gt;ld：链接器，把编译生成的多个目标文件组织成最终的可执行程序文件。&lt;/li&gt;
&lt;li&gt;readelf：可用于查看目标文件或可执行程序文件的信息。&lt;/li&gt;
&lt;li&gt;objcopy： 可用于目标文件格式转换，如  &lt;code&gt;.elf&lt;/code&gt;  转换成  &lt;code&gt;.bin&lt;/code&gt;  。&lt;/li&gt;
&lt;li&gt;objdump：可用于查看目标文件的信息，最主要的作用是反汇编。&lt;/li&gt;
&lt;li&gt;addr2line：可用于将程序指令地址转换为所对应的函数名、以及函数所在的源文件名和行号。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Glibc：包含了主要的 c 库，这个库提供了基本的例程，用于分配内存，搜索目录，读写文件，字符串处理等等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;arm-编译工具链&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#arm-编译工具链&#34;&gt;#&lt;/a&gt; ARM 编译工具链&lt;/h1&gt;
&lt;p&gt;编译器主要用来编译源文件，而在编译一个源文件时需要经过以下 4 步：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;预处理：为把头文件的代码、宏之类的内容转换成生成的  &lt;code&gt;.i&lt;/code&gt;  文件，还是 C 代码。&lt;/li&gt;
&lt;li&gt;编译：把预处理后的  &lt;code&gt;.i&lt;/code&gt;  文件通过编译成  &lt;code&gt;.s&lt;/code&gt;  文件，汇编语言。&lt;/li&gt;
&lt;li&gt;汇编：将汇编语言文件生成目标文件  &lt;code&gt;.o&lt;/code&gt;  文件，机器码。&lt;/li&gt;
&lt;li&gt;链接：将每个源文件对应的  &lt;code&gt;.o&lt;/code&gt;  文件链接起来，就生成一个可执行程序文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;交叉编译器：如果我们希望编译器运行在 x86 架构平台上，然后编译生成 ARM 架构的可执行程序，这种编译器和目标程序运行在不同架构的编译过程，被称为 “交叉编译”，而对应使用的编译工具就成为交叉编译器。&lt;/p&gt;
&lt;p&gt;GNU 交叉编译器的命名规则：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;arch [-vendor] [-os] [-(gnu)abi] [-language]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;arch：体系架构，如  &lt;code&gt;arm&lt;/code&gt;  、  &lt;code&gt;aarch64&lt;/code&gt;  或者  &lt;code&gt;mips&lt;/code&gt;  等；&lt;/li&gt;
&lt;li&gt;vendor：工具链提供商，没有 vendor 时，用  &lt;code&gt;none&lt;/code&gt;  代替；&lt;/li&gt;
&lt;li&gt;os：目标操作系统，没有 os 支持时，用  &lt;code&gt;none&lt;/code&gt;  代替；&lt;/li&gt;
&lt;li&gt;abi：应用二进制接口（Application Binary Interface），对于嵌入式平台命名为  &lt;code&gt;eabi&lt;/code&gt;  ，  &lt;code&gt;e&lt;/code&gt;  表示 Embedded；&lt;/li&gt;
&lt;li&gt;language：编译器支持的语言，如： &lt;code&gt;gcc&lt;/code&gt;  、  &lt;code&gt;g++&lt;/code&gt;  。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;note：如果同时没有 vendor 和 os 支持，则只用一个 none 代替。例如 arm-none-eabi 中的 none 表示既没有 vendor 也没有 os 支持。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于 ABI 和 EABI 的区别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ABI：应用二进制接口（Application Binary Interface）。在计算机中，应用二进制接口描述了应用程序（或者其他类型）和操作系统之间或其他应用程序的低级接口。&lt;/p&gt;
&lt;p&gt;EABI：嵌入式应用二进制接口（Embedded Application Binary Interface）。嵌入式应用二进制接口指定了文件格式、数据类型、寄存器使用、堆积组织优化和在一个嵌入式软件中的参数的标准约定。开发者使用自己的汇编语言也可以使用 EABI 作为与兼容的编译器生成的汇编语言的接口。&lt;/p&gt;
&lt;p&gt;两者主要区别是：ABI 是计算机上的，EABI 是嵌入式平台上（如 ARM，MIPS 等）的；EABI 去掉了用户代码和系统内核之间的抽象，可以让用户代码直接访问硬件，提高了性能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于 gcc 和 g++ 的区别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实际上，只要是 gcc 编译器支持的语言都可以使用 gcc 编译器完成编译，而 g++ 编译器只会按照 C++ 的风格编译代码。虽然很多情况下我们都认为 C++ 是对 C 语言兼容的，但是实际上在一些具体的语法规则上，C++ 在编译过程中的语法检查会更加严格。此外，C++ 语言本身在编译 过程中也会引入 C++ 的标准库，如果使用 gcc 编译器直接编译 C++ 语言会在编译过程中添加额外的参数，这样会显得编译过程较为繁琐（因为大部分情况下我们希望标准库可以直接引入，而不是再需要手动指定，否则对于初级使用者会带来额外的学习负担）。为了更方便使用编译器，我们选择 g++ 来编译 C++ 代码。总结一下，gcc 可以完成 C++ 语言的编译，但是使用过程会较为繁琐，而 g++ 就是简化后的编译指令。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;与 gnueabi 相关的 gnueabi 和 gnueabihf 的区别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gcc-arm-linux-gnueabi – The GNU C compiler for armel architecture&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;AND&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gcc-arm-linux-gnueabihf – The GNU C compiler for armhf architecture&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这两个交叉编译器分别适用于 armel 和 armhf 两个不同的架构，armel 和 armhf 这两种架构在对待浮点运算采取了不同的策略（有 fpu 的 ARM 才能支持这两种浮点运算策略）。&lt;/p&gt;
&lt;p&gt;这两个交叉编译器是 gcc 的选项  &lt;code&gt;-mfloat-abi&lt;/code&gt;  的默认值不同；该选项有三种值 soft、softfp、hard（其中后两者都要求 ARM 里有 fpu 浮点运算单元，soft 与后两者是兼容的，但 softfp 和 hard 两种模式互不兼容）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;soft： 不用 fpu 进行浮点计算，即使有 fpu 浮点运算单元也不用，而是使用软件模式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;softfp： armel 架构（对应的编译器为 arm-linux-gnueabi-gcc ）采用的默认值，用 fpu 计算，但是传参数用普通寄存器传，这样中断的时候，只需要保存普通寄存器，中断负荷小，但是参数需要转换成浮点的再计算。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hard： armhf 架构（对应的编译器 arm-linux-gnueabihf-gcc ）采用的默认值，用 fpu 计算，传参数也用 fpu 中的浮点寄存器传，省去了转换，性能最好，但是中断负荷高。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;几种常见的编译 ARM 的交叉编译器：&lt;/p&gt;
&lt;p&gt;arm-none-eabi：用于编译裸机程序或系统，这个是没有操作系统的，不支持那些系统调用等系列接口，可调用  &lt;code&gt;newlib&lt;/code&gt;  库，适用于 ARM7/Cortex-M/Cortex-R。&lt;/p&gt;
&lt;p&gt;arm-none-linux-gnueabi：用于编译 ARM 架构的 u-boot、Linux 内核、Linux 应用等，使用  &lt;code&gt;glibc&lt;/code&gt;  库，适用于 ARM9/ARM11/Cortex-A。&lt;/p&gt;
&lt;p&gt;arm-eabi： 用于安卓程序编译。&lt;/p&gt;
&lt;p&gt;armcc：早期 Keil 软件公司（现已被 ARM 公司收购）出品的支持&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cua2VpbC5jb20vZGQv&#34;&gt;相应器件&lt;/span&gt;的编译工具，可以编译裸机程序，一般和 ARM 开发工具一起，Keil MDK 内置。&lt;/p&gt;
&lt;h1 id=&#34;基于-gcc-的-arm-编译工具链提供商&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基于-gcc-的-arm-编译工具链提供商&#34;&gt;#&lt;/a&gt; 基于 GCC 的 ARM 编译工具链提供商&lt;/h1&gt;
&lt;p&gt;目前，为 ARM 平台提供交叉编译工具链的提供商，本人所找到的只有两家：ARM 官方和 Linaro 公司。&lt;/p&gt;
&lt;h2 id=&#34;arm-gnu-toolchain&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#arm-gnu-toolchain&#34;&gt;#&lt;/a&gt; Arm GNU Toolchain&lt;/h2&gt;
&lt;p&gt;ARM 除了有自己的专用编译器之外，还维护了一套基于 GCC 的交叉编译工具链，被称为 Arm GNU Toolchain。截至于 2022 年，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIuYXJtLmNvbS9kb3dubG9hZHMvLS9hcm0tZ251LXRvb2xjaGFpbi1kb3dubG9hZHM=&#34;&gt;Arm GNU Toolchain&lt;/span&gt; 被分为了 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIuYXJtLmNvbS9kb3dubG9hZHMvLS9nbnUtYQ==&#34;&gt;A family&lt;/span&gt;（GNU Toolchain for the Cortex-A Family） 和 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIuYXJtLmNvbS9kb3dubG9hZHMvLS9nbnUtcm0=&#34;&gt;R &amp;amp; M family&lt;/span&gt;（GNU Arm Embedded Toolchain）两大类，但是自 2022 年开始，ARM 对其进行了统一。&lt;/p&gt;
&lt;p&gt;编译器的目标平台：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AArch32 bare-metal target：32 位纯裸机平台&lt;/li&gt;
&lt;li&gt;AArch64 ELF bare-metal target：64 位纯裸机平台&lt;/li&gt;
&lt;li&gt;AArch64 ELF bare-metal, big-endian target：64 位纯裸机平台（大端模式）&lt;/li&gt;
&lt;li&gt;AArch64 GNU/Linux target：64 位 Linux 平台&lt;/li&gt;
&lt;li&gt;AArch64 GNU/Linux big-endian target：64 位 Linux 平台（大端模式）&lt;/li&gt;
&lt;li&gt;AArch32 target with soft float：32 位带软件模式浮点运算&lt;/li&gt;
&lt;li&gt;AArch32 target with hard float：32 位带硬件模式浮点运算&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;linaro-toolchain&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linaro-toolchain&#34;&gt;#&lt;/a&gt; Linaro Toolchain&lt;/h2&gt;
&lt;p&gt;Linaro 是一间非营利性质的开放源代码软件工程公司，主要的目标在于开发不同半导体公司系统单片机（SoC）平台的共通软件。其维护的工具链下载地址为：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zbmFwc2hvdHMubGluYXJvLm9yZy9nbnUtdG9vbGNoYWluLw==&#34;&gt;https://snapshots.linaro.org/gnu-toolchain/&lt;/span&gt; 。另外，从 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubGluYXJvLm9yZy9kb3dubG9hZHMv&#34;&gt;https://www.linaro.org/downloads/&lt;/span&gt; 的描述上看，目前 Linaro 仅针对于 Cortex-A 内核的编译工具链进行维护，而对用于 ARM 嵌入式处理器的 Cortex-R 和 Cortex-M 的最新裸机编译工具链，则需要去 ARM 官网下载！旧版可以在 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3JlbGVhc2VzLmxpbmFyby5vcmcvY29tcG9uZW50cy90b29sY2hhaW4vYmluYXJpZXMv&#34;&gt;http://releases.linaro.org/components/toolchain/binaries/&lt;/span&gt; 中下载。&lt;/p&gt;
&lt;h2 id=&#34;yocto-toolchain&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#yocto-toolchain&#34;&gt;#&lt;/a&gt; Yocto Toolchain&lt;/h2&gt;
&lt;p&gt;Yocto 为构建定制化的嵌入式 Linux 发行版提供一系列模板、工具和方法来简化定制 Linux 开发，允许更换软件配置和构建，避免重复工作 以及不必要的维护。Yocto 鼓励跨各种应用程序和设备类型的创新，支持多种硬件架构，包括 X86 (32 bit 和 64 bit)、ARM (32 bit 和 64 bit) 、RISC-V、PPC 和 MIPS 等。&lt;/p&gt;
&lt;p&gt;Yocto 构建的交叉编译工具，蕴含了众多的第三方组件，因此在构建完整的系统的中，不需要花太多的时间去编译添加第三方组件；像 NXP 的 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2kuTVg=&#34;&gt;i.MX&lt;/span&gt; 系列的 SDK 固件包，就推荐使用 Yocto 搭建，同时给出基于 Yocto 定制的 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2kuTVg=&#34;&gt;i.MX&lt;/span&gt; 搭建环境。除此如果想用 Yocto 原生 Toolchain 可以到 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2Rvd25sb2Fkcy55b2N0b3Byb2plY3Qub3JnL3JlbGVhc2VzL3lvY3RvLz9DPU0mYW1wO089RA==&#34;&gt;http://downloads.yoctoproject.org/releases/yocto/?C=M&amp;amp;O=D&lt;/span&gt; 进行下载，先选择需要版本，在  &lt;code&gt;./toolchain/&lt;/code&gt;  路径下选择相应的平台，一般后缀  &lt;code&gt;.sh&lt;/code&gt;  文件为 Yocto Toolchain 的安装脚本。&lt;/p&gt;
&lt;h1 id=&#34;reference&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#reference&#34;&gt;#&lt;/a&gt; Reference&lt;/h1&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veGlhb3RsaWxpL3AvMzMwNjEwMC5odG1s&#34;&gt;https://www.cnblogs.com/xiaotlili/p/3306100.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pDU2hvdUNTRE4vYXJ0aWNsZS9kZXRhaWxzLzg5NTUzMzIz&#34;&gt;https://blog.csdn.net/ZCShouCSDN/article/details/89553323&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jb21tdW5pdHkuYXJtLmNvbS9hcm0tY29tbXVuaXR5LWJsb2dzL2IvZW1iZWRkZWQtYmxvZy9wb3N0cy9zaHJpbmsteW91ci1tY3UtY29kZS1zaXplLXdpdGgtZ2NjLWFybS1lbWJlZGRlZC00LTc=&#34;&gt;https://community.arm.com/arm-community-blogs/b/embedded-blog/posts/shrink-your-mcu-code-size-with-gcc-arm-embedded-4-7&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTQ3MzcxMDQvd2hhdC1pcy10aGUtZGVmYXVsdC1jLXN0ZC1zdGFuZGFyZC12ZXJzaW9uLWZvci10aGUtY3VycmVudC1nY2MtZXNwZWNpYWxseS1vbi11&#34;&gt;https://stackoverflow.com/questions/14737104/what-is-the-default-c-std-standard-version-for-the-current-gcc-especially-on-u&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly91YnVudHVxYS5jb20vYXJ0aWNsZS8xMDQzMi5odG1s&#34;&gt;https://ubuntuqa.com/article/10432.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYW1vYmJzLmNvbS9mb3J1bS5waHA/bW9kPXZpZXd0aHJlYWQmYW1wO3RpZD01NzA5NDAw&#34;&gt;https://www.amobbs.com/forum.php?mod=viewthread&amp;amp;tid=5709400&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;附&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#附&#34;&gt;#&lt;/a&gt; 附&lt;/h1&gt;
&lt;p&gt;GNU win：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9nbnV3aW4zMi5zb3VyY2Vmb3JnZS5uZXQv&#34;&gt;https://gnuwin32.sourceforge.net/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;GNU software：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZ251Lm9yZy9zb2Z0d2FyZS9zb2Z0d2FyZS56aC1jbi5odG1s&#34;&gt;https://www.gnu.org/software/software.zh-cn.html&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
